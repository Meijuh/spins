/* Generated By:JavaCC: Do not edit this line. Promela.java */
package spinja.promela.compiler.parser;

import spinja.promela.compiler.*;
import spinja.promela.compiler.automaton.*;
import spinja.promela.compiler.expression.*;
import spinja.promela.compiler.variable.*;
import spinja.promela.compiler.actions.*;
import java.io.*;
import java.util.*;

public class Promela implements PromelaConstants {
        private Specification specification;
        private Proctype currentProc;
        private Automaton automaton;

        private int procNr;

        public int getNextProcNr() {
                return procNr++;
        }

        private Map<String, State> labels = new HashMap<String, State>();

        private Map<State, Token> gotos = new HashMap<State, Token>();

        private Variable _pid = new Variable(VariableType.BYTE, "_pid", 1);

        VariableType type;

        private void setGotos() throws ParseException {
                for(State n : gotos.keySet()) {
                        Token t = gotos.get(n);
                        State ref = labels.get(t.image);
                        if(ref == null) {
                                throw new MyParseException("Could not find label: " + t.image, t);
                        }
                        new GotoTransition(n, ref, "goto " + t.image);
                }
                gotos.clear();
                labels.clear();
        }

/* The specification itself */
  final public Specification spec(String name) throws ParseException {
        specification = new Specification(name);
    label_1:
    while (true) {
      module();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROCTYPE:
      case INIT:
      case NEVER:
      case TYPEDEF:
      case MTYPE:
      case BIT:
      case BOOL:
      case BYTE:
      case PID:
      case SHORT:
      case INT:
      case CHAN:
      case ACTIVE:
      case SEMICOLON:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
          {if (true) return specification;}
    throw new Error("Missing return statement in function");
  }

/* Each part in the specification is a called a module */
  final public void module() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPEDEF:
      utype();
      break;
    default:
      jj_la1[1] = jj_gen;
      if (jj_2_1(2147483647)) {
        mtype();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MTYPE:
        case BIT:
        case BOOL:
        case BYTE:
        case PID:
        case SHORT:
        case INT:
        case CHAN:
        case IDENTIFIER:
          one_decl(specification.getVariableStore());
          break;
        case PROCTYPE:
        case ACTIVE:
          proctype();
          break;
        case INIT:
          init();
          break;
        case NEVER:
          never();
          break;
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

/*** Here the different modules are defined ***/

/* Definition of a process */
  final public void proctype() throws ParseException {
        int nrActive = 0;
        Token n, id;
        State s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ACTIVE:
      jj_consume_token(ACTIVE);
            nrActive = 1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACK:
        jj_consume_token(LBRACK);
        n = jj_consume_token(NUMBER);
                                 nrActive = Integer.parseInt(n.image);
        jj_consume_token(RBRACK);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(PROCTYPE);
    id = jj_consume_token(IDENTIFIER);
                currentProc = new Proctype(specification, getNextProcNr(), nrActive, id.image);
                automaton = currentProc.getAutomaton();
                specification.addProc(currentProc);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MTYPE:
    case BIT:
    case BOOL:
    case BYTE:
    case PID:
    case SHORT:
    case INT:
    case CHAN:
    case IDENTIFIER:
      decl_list(currentProc);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
          currentProc.lastArgument();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIORITY:
      priority();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROVIDED:
      enabler();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(LCURLY);
    s = sequence(currentProc.getStartState(), null, false);
    jj_consume_token(RCURLY);
                if(s != null) {
                        new EndTransition(s);
                }
                setGotos();
  }

  final public void priority() throws ParseException {
        ConstantExpression c;
    jj_consume_token(PRIORITY);
    c = constant();
          currentProc.setPriority(c.getNumber());
  }

  final public void enabler() throws ParseException {
        Expression expr;
    jj_consume_token(PROVIDED);
    jj_consume_token(LPAREN);
    expr = expr();
    jj_consume_token(RPAREN);
          currentProc.setEnabler(expr);
  }

/* An init process */
  final public void init() throws ParseException {
        State s;
    jj_consume_token(INIT);
                currentProc = new Proctype(specification, getNextProcNr(), 1, "init");
                automaton = currentProc.getAutomaton();
                specification.addProc(currentProc);
                currentProc.lastArgument();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIORITY:
      priority();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(LCURLY);
    s = sequence(currentProc.getStartState(), null, false);
    jj_consume_token(RCURLY);
                if(s != null) {
                        new EndTransition(s);
                }
                setGotos();
  }

  final public void never() throws ParseException {
        State s;
    jj_consume_token(NEVER);
                currentProc = new Proctype(specification, getNextProcNr(), 0, "never");
                automaton = currentProc.getAutomaton();
                specification.setNever(currentProc);
                currentProc.lastArgument();
    jj_consume_token(LCURLY);
    s = sequence(currentProc.getStartState(), null, false);
    jj_consume_token(RCURLY);
                if(s != null) {
                        new NeverEndTransition(s);
                }
                setGotos();
  }

  final public void utype() throws ParseException {
        Token id;
    jj_consume_token(TYPEDEF);
    id = jj_consume_token(IDENTIFIER);
                {if (true) throw new MyParseException("User defined types are not (yet) supported", id);}
                //CustomVariableType custom = new CustomVariableType(id.image);
                //specification.addType(custom);

    jj_consume_token(LCURLY);
    jj_consume_token(RCURLY);
  }

  final public void mtype() throws ParseException {
        Token id;
    jj_consume_token(MTYPE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(LCURLY);
    id = jj_consume_token(IDENTIFIER);
          specification.addMType(id.image);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      id = jj_consume_token(IDENTIFIER);
          specification.addMType(id.image);
    }
    jj_consume_token(RCURLY);
  }

/*** Here the declarations start ***/
  final public void decl_list(VariableContainer store) throws ParseException {
    one_decl(store);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
      jj_consume_token(SEMICOLON);
      one_decl(store);
    }
  }

  final public void one_decl(VariableContainer store) throws ParseException {
    type = typename();
    if (type instanceof ChannelType) {
      ivar_chan(store);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        ivar_chan(store);
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ivar(store, type);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[13] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          ivar(store, type);
        }
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ivar(VariableContainer store, VariableType type) throws ParseException {
        Token id;
        int arraySize = 1;
        Expression expr = null;
        ConstantExpression c = null;
    id = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      jj_consume_token(LBRACK);
      c = constant();
      jj_consume_token(RBRACK);
                                          arraySize = c.getNumber();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
          Variable var = new Variable(type, id.image, arraySize);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      expr = lor_expr();
                var.setInitExpr(expr);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
          store.addVariable(var);
  }

  final public void ivar_chan(VariableContainer store) throws ParseException {
        Token id;
        int arraySize = 1;
        ConstantExpression c = null;
        ChannelVariable var;
    id = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      jj_consume_token(LBRACK);
      c = constant();
      jj_consume_token(RBRACK);
                                          arraySize = c.getNumber();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
          var = new ChannelVariable(id.image, arraySize);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      ch_init(var);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
          store.addVariable(var); var.setRead(true);
  }

  final public void ch_init(ChannelVariable var) throws ParseException {
        Expression size;
        VariableType type;
        ChannelType ctype;
    jj_consume_token(LBRACK);
    size = constant();
    jj_consume_token(RBRACK);
    jj_consume_token(OF);
                ctype = specification.newChannelType(size.getConstantValue());
                var.setType(ctype);
    jj_consume_token(LCURLY);
    type = typename();
          ctype.addType(type);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      type = typename();
          ctype.addType(type);
    }
    jj_consume_token(RCURLY);
  }

  final public VariableType typename() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BIT:
      jj_consume_token(BIT);
                {if (true) return VariableType.BIT;}
      break;
    case BOOL:
      jj_consume_token(BOOL);
                 {if (true) return VariableType.BOOL;}
      break;
    case BYTE:
      jj_consume_token(BYTE);
                 {if (true) return VariableType.BYTE;}
      break;
    case PID:
      jj_consume_token(PID);
                {if (true) return VariableType.PID;}
      break;
    case SHORT:
      jj_consume_token(SHORT);
                  {if (true) return VariableType.SHORT;}
      break;
    case INT:
      jj_consume_token(INT);
                {if (true) return VariableType.INT;}
      break;
    case MTYPE:
      jj_consume_token(MTYPE);
                  {if (true) return VariableType.MTYPE;}
      break;
    case CHAN:
      jj_consume_token(CHAN);
                 {if (true) return ChannelType.UNASSIGNED_CHANNEL;}
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                {if (true) throw new MyParseException("The given type was not supported", t);}
                //return specification.getType(t.image); 

      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*** Here all the normal statements are defined ***/
  final public State sequence(State start, State breakNode, boolean inAtomic) throws ParseException {
        Expression expr;
        Token id, t;
        State end = start;
        Transition trans;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
    case RARROW:
      delim();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MTYPE:
      case BIT:
      case BOOL:
      case BYTE:
      case PID:
      case SHORT:
      case INT:
      case CHAN:
      case XR:
      case XS:
      case IF:
      case DO:
      case ATOMIC:
      case D_STEP:
      case ELSE:
      case BREAK:
      case GOTO:
      case PRINT:
      case ASSERT:
      case LEN:
      case TIMEOUT:
      case NP_:
      case ENABLED:
      case PC_VALUE:
      case RUN:
      case FULL:
      case EMPTY:
      case NFULL:
      case NEMPTY:
      case TRUE:
      case FALSE:
      case SKIP_:
      case VAR_PID:
      case LCURLY:
      case LPAREN:
      case SEMICOLON:
      case RARROW:
      case BNOT:
      case LNOT:
      case MINUS:
      case IDENTIFIER:
      case NUMBER:
        end = sequence(end, breakNode, inAtomic);
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[54] = jj_gen;
      if (jj_2_2(2147483647)) {
        one_decl(currentProc);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
        case RARROW:
          delim();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MTYPE:
          case BIT:
          case BOOL:
          case BYTE:
          case PID:
          case SHORT:
          case INT:
          case CHAN:
          case XR:
          case XS:
          case IF:
          case DO:
          case ATOMIC:
          case D_STEP:
          case ELSE:
          case BREAK:
          case GOTO:
          case PRINT:
          case ASSERT:
          case LEN:
          case TIMEOUT:
          case NP_:
          case ENABLED:
          case PC_VALUE:
          case RUN:
          case FULL:
          case EMPTY:
          case NFULL:
          case NEMPTY:
          case TRUE:
          case FALSE:
          case SKIP_:
          case VAR_PID:
          case LCURLY:
          case LPAREN:
          case SEMICOLON:
          case RARROW:
          case BNOT:
          case LNOT:
          case MINUS:
          case IDENTIFIER:
          case NUMBER:
            end = sequence(end, breakNode, inAtomic);
            break;
          default:
            jj_la1[22] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[23] = jj_gen;
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case XR:
          jj_consume_token(XR);
          expr = varref();
          currentProc.addXR((Identifier)expr);
          label_7:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[24] = jj_gen;
              break label_7;
            }
            jj_consume_token(COMMA);
            expr = varref();
                                 currentProc.addXR((Identifier)expr);
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEMICOLON:
          case RARROW:
            delim();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case MTYPE:
            case BIT:
            case BOOL:
            case BYTE:
            case PID:
            case SHORT:
            case INT:
            case CHAN:
            case XR:
            case XS:
            case IF:
            case DO:
            case ATOMIC:
            case D_STEP:
            case ELSE:
            case BREAK:
            case GOTO:
            case PRINT:
            case ASSERT:
            case LEN:
            case TIMEOUT:
            case NP_:
            case ENABLED:
            case PC_VALUE:
            case RUN:
            case FULL:
            case EMPTY:
            case NFULL:
            case NEMPTY:
            case TRUE:
            case FALSE:
            case SKIP_:
            case VAR_PID:
            case LCURLY:
            case LPAREN:
            case SEMICOLON:
            case RARROW:
            case BNOT:
            case LNOT:
            case MINUS:
            case IDENTIFIER:
            case NUMBER:
              end = sequence(end, breakNode, inAtomic);
              break;
            default:
              jj_la1[25] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[26] = jj_gen;
            ;
          }
          break;
        case XS:
          jj_consume_token(XS);
          expr = varref();
          currentProc.addXS((Identifier)expr);
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[27] = jj_gen;
              break label_8;
            }
            jj_consume_token(COMMA);
            expr = varref();
                                 currentProc.addXS((Identifier)expr);
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEMICOLON:
          case RARROW:
            delim();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case MTYPE:
            case BIT:
            case BOOL:
            case BYTE:
            case PID:
            case SHORT:
            case INT:
            case CHAN:
            case XR:
            case XS:
            case IF:
            case DO:
            case ATOMIC:
            case D_STEP:
            case ELSE:
            case BREAK:
            case GOTO:
            case PRINT:
            case ASSERT:
            case LEN:
            case TIMEOUT:
            case NP_:
            case ENABLED:
            case PC_VALUE:
            case RUN:
            case FULL:
            case EMPTY:
            case NFULL:
            case NEMPTY:
            case TRUE:
            case FALSE:
            case SKIP_:
            case VAR_PID:
            case LCURLY:
            case LPAREN:
            case SEMICOLON:
            case RARROW:
            case BNOT:
            case LNOT:
            case MINUS:
            case IDENTIFIER:
            case NUMBER:
              end = sequence(end, breakNode, inAtomic);
              break;
            default:
              jj_la1[28] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[29] = jj_gen;
            ;
          }
          break;
        case IF:
          jj_consume_token(IF);
          end = new State(automaton, inAtomic);
          label_9:
          while (true) {
            option(start, end, breakNode, inAtomic);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case OPTION:
              ;
              break;
            default:
              jj_la1[30] = jj_gen;
              break label_9;
            }
          }
          jj_consume_token(FI);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MTYPE:
          case BIT:
          case BOOL:
          case BYTE:
          case PID:
          case SHORT:
          case INT:
          case CHAN:
          case XR:
          case XS:
          case IF:
          case DO:
          case ATOMIC:
          case D_STEP:
          case ELSE:
          case BREAK:
          case GOTO:
          case PRINT:
          case ASSERT:
          case LEN:
          case TIMEOUT:
          case NP_:
          case ENABLED:
          case PC_VALUE:
          case RUN:
          case FULL:
          case EMPTY:
          case NFULL:
          case NEMPTY:
          case TRUE:
          case FALSE:
          case SKIP_:
          case VAR_PID:
          case LCURLY:
          case LPAREN:
          case SEMICOLON:
          case RARROW:
          case BNOT:
          case LNOT:
          case MINUS:
          case IDENTIFIER:
          case NUMBER:
            end = sequence(end, breakNode, inAtomic);
            break;
          default:
            jj_la1[31] = jj_gen;
            ;
          }
          break;
        case DO:
          jj_consume_token(DO);
          end = new State(automaton, inAtomic);
          label_10:
          while (true) {
            option(start, start, end, inAtomic);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case OPTION:
              ;
              break;
            default:
              jj_la1[32] = jj_gen;
              break label_10;
            }
          }
          jj_consume_token(OD);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MTYPE:
          case BIT:
          case BOOL:
          case BYTE:
          case PID:
          case SHORT:
          case INT:
          case CHAN:
          case XR:
          case XS:
          case IF:
          case DO:
          case ATOMIC:
          case D_STEP:
          case ELSE:
          case BREAK:
          case GOTO:
          case PRINT:
          case ASSERT:
          case LEN:
          case TIMEOUT:
          case NP_:
          case ENABLED:
          case PC_VALUE:
          case RUN:
          case FULL:
          case EMPTY:
          case NFULL:
          case NEMPTY:
          case TRUE:
          case FALSE:
          case SKIP_:
          case VAR_PID:
          case LCURLY:
          case LPAREN:
          case SEMICOLON:
          case RARROW:
          case BNOT:
          case LNOT:
          case MINUS:
          case IDENTIFIER:
          case NUMBER:
            end = sequence(end, breakNode, inAtomic);
            break;
          default:
            jj_la1[33] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[55] = jj_gen;
          if (jj_2_3(2147483647)) {
            id = jj_consume_token(IDENTIFIER);
            jj_consume_token(COLON);
                if(labels.containsKey(id.image)) {
                        {if (true) throw new MyParseException("Duplicate label", id);}
                }
                labels.put(id.image, start);
                start.addLabel(id.image);
            end = sequence(end, breakNode, inAtomic);
          } else if (jj_2_4(2147483647)) {
            end = channel_statement(start, breakNode, inAtomic);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SEMICOLON:
            case RARROW:
              delim();
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case MTYPE:
              case BIT:
              case BOOL:
              case BYTE:
              case PID:
              case SHORT:
              case INT:
              case CHAN:
              case XR:
              case XS:
              case IF:
              case DO:
              case ATOMIC:
              case D_STEP:
              case ELSE:
              case BREAK:
              case GOTO:
              case PRINT:
              case ASSERT:
              case LEN:
              case TIMEOUT:
              case NP_:
              case ENABLED:
              case PC_VALUE:
              case RUN:
              case FULL:
              case EMPTY:
              case NFULL:
              case NEMPTY:
              case TRUE:
              case FALSE:
              case SKIP_:
              case VAR_PID:
              case LCURLY:
              case LPAREN:
              case SEMICOLON:
              case RARROW:
              case BNOT:
              case LNOT:
              case MINUS:
              case IDENTIFIER:
              case NUMBER:
                end = sequence(end, breakNode, inAtomic);
                break;
              default:
                jj_la1[34] = jj_gen;
                ;
              }
              break;
            default:
              jj_la1[35] = jj_gen;
              ;
            }
          } else if (jj_2_5(2147483647)) {
            end = assign(start, breakNode, inAtomic);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SEMICOLON:
            case RARROW:
              delim();
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case MTYPE:
              case BIT:
              case BOOL:
              case BYTE:
              case PID:
              case SHORT:
              case INT:
              case CHAN:
              case XR:
              case XS:
              case IF:
              case DO:
              case ATOMIC:
              case D_STEP:
              case ELSE:
              case BREAK:
              case GOTO:
              case PRINT:
              case ASSERT:
              case LEN:
              case TIMEOUT:
              case NP_:
              case ENABLED:
              case PC_VALUE:
              case RUN:
              case FULL:
              case EMPTY:
              case NFULL:
              case NEMPTY:
              case TRUE:
              case FALSE:
              case SKIP_:
              case VAR_PID:
              case LCURLY:
              case LPAREN:
              case SEMICOLON:
              case RARROW:
              case BNOT:
              case LNOT:
              case MINUS:
              case IDENTIFIER:
              case NUMBER:
                end = sequence(end, breakNode, inAtomic);
                break;
              default:
                jj_la1[36] = jj_gen;
                ;
              }
              break;
            default:
              jj_la1[37] = jj_gen;
              ;
            }
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LEN:
            case TIMEOUT:
            case NP_:
            case ENABLED:
            case PC_VALUE:
            case RUN:
            case FULL:
            case EMPTY:
            case NFULL:
            case NEMPTY:
            case TRUE:
            case FALSE:
            case SKIP_:
            case VAR_PID:
            case LPAREN:
            case BNOT:
            case LNOT:
            case MINUS:
            case IDENTIFIER:
            case NUMBER:
              expr = expr();
                end = new State(automaton, inAtomic);
                start.newTransition(new ExprAction(expr), end);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
              case RARROW:
                delim();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case MTYPE:
                case BIT:
                case BOOL:
                case BYTE:
                case PID:
                case SHORT:
                case INT:
                case CHAN:
                case XR:
                case XS:
                case IF:
                case DO:
                case ATOMIC:
                case D_STEP:
                case ELSE:
                case BREAK:
                case GOTO:
                case PRINT:
                case ASSERT:
                case LEN:
                case TIMEOUT:
                case NP_:
                case ENABLED:
                case PC_VALUE:
                case RUN:
                case FULL:
                case EMPTY:
                case NFULL:
                case NEMPTY:
                case TRUE:
                case FALSE:
                case SKIP_:
                case VAR_PID:
                case LCURLY:
                case LPAREN:
                case SEMICOLON:
                case RARROW:
                case BNOT:
                case LNOT:
                case MINUS:
                case IDENTIFIER:
                case NUMBER:
                  end = sequence(end, breakNode, inAtomic);
                  break;
                default:
                  jj_la1[38] = jj_gen;
                  ;
                }
                break;
              default:
                jj_la1[39] = jj_gen;
                ;
              }
              break;
            case ELSE:
              t = jj_consume_token(ELSE);
                end = new State(automaton, inAtomic);
                //start.newTransition(new ElseAction(t), end);
                new ElseTransition(start, end);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
              case RARROW:
                delim();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case MTYPE:
                case BIT:
                case BOOL:
                case BYTE:
                case PID:
                case SHORT:
                case INT:
                case CHAN:
                case XR:
                case XS:
                case IF:
                case DO:
                case ATOMIC:
                case D_STEP:
                case ELSE:
                case BREAK:
                case GOTO:
                case PRINT:
                case ASSERT:
                case LEN:
                case TIMEOUT:
                case NP_:
                case ENABLED:
                case PC_VALUE:
                case RUN:
                case FULL:
                case EMPTY:
                case NFULL:
                case NEMPTY:
                case TRUE:
                case FALSE:
                case SKIP_:
                case VAR_PID:
                case LCURLY:
                case LPAREN:
                case SEMICOLON:
                case RARROW:
                case BNOT:
                case LNOT:
                case MINUS:
                case IDENTIFIER:
                case NUMBER:
                  end = sequence(end, breakNode, inAtomic);
                  break;
                default:
                  jj_la1[40] = jj_gen;
                  ;
                }
                break;
              default:
                jj_la1[41] = jj_gen;
                ;
              }
              break;
            case GOTO:
              t = jj_consume_token(GOTO);
              id = jj_consume_token(IDENTIFIER);
                gotos.put(start, id);
                end = new State(automaton, inAtomic);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
              case RARROW:
                delim();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case MTYPE:
                case BIT:
                case BOOL:
                case BYTE:
                case PID:
                case SHORT:
                case INT:
                case CHAN:
                case XR:
                case XS:
                case IF:
                case DO:
                case ATOMIC:
                case D_STEP:
                case ELSE:
                case BREAK:
                case GOTO:
                case PRINT:
                case ASSERT:
                case LEN:
                case TIMEOUT:
                case NP_:
                case ENABLED:
                case PC_VALUE:
                case RUN:
                case FULL:
                case EMPTY:
                case NFULL:
                case NEMPTY:
                case TRUE:
                case FALSE:
                case SKIP_:
                case VAR_PID:
                case LCURLY:
                case LPAREN:
                case SEMICOLON:
                case RARROW:
                case BNOT:
                case LNOT:
                case MINUS:
                case IDENTIFIER:
                case NUMBER:
                  end = sequence(end, breakNode, inAtomic);
                  break;
                default:
                  jj_la1[42] = jj_gen;
                  ;
                }
                break;
              default:
                jj_la1[43] = jj_gen;
                ;
              }
              break;
            case PRINT:
              t = jj_consume_token(PRINT);
              jj_consume_token(LPAREN);
              id = jj_consume_token(STRING);
          PrintAction pa = new PrintAction(t, id.image);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                jj_consume_token(COMMA);
                arg_lst(pa);
                break;
              default:
                jj_la1[44] = jj_gen;
                ;
              }
              jj_consume_token(RPAREN);
                end = new State(automaton, inAtomic);
                start.newTransition(pa, end);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
              case RARROW:
                delim();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case MTYPE:
                case BIT:
                case BOOL:
                case BYTE:
                case PID:
                case SHORT:
                case INT:
                case CHAN:
                case XR:
                case XS:
                case IF:
                case DO:
                case ATOMIC:
                case D_STEP:
                case ELSE:
                case BREAK:
                case GOTO:
                case PRINT:
                case ASSERT:
                case LEN:
                case TIMEOUT:
                case NP_:
                case ENABLED:
                case PC_VALUE:
                case RUN:
                case FULL:
                case EMPTY:
                case NFULL:
                case NEMPTY:
                case TRUE:
                case FALSE:
                case SKIP_:
                case VAR_PID:
                case LCURLY:
                case LPAREN:
                case SEMICOLON:
                case RARROW:
                case BNOT:
                case LNOT:
                case MINUS:
                case IDENTIFIER:
                case NUMBER:
                  end = sequence(end, breakNode, inAtomic);
                  break;
                default:
                  jj_la1[45] = jj_gen;
                  ;
                }
                break;
              default:
                jj_la1[46] = jj_gen;
                ;
              }
              break;
            case ASSERT:
              t = jj_consume_token(ASSERT);
              expr = expr();
                end = new State(automaton, inAtomic);
                start.newTransition(new AssertAction(t, expr), end);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
              case RARROW:
                delim();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case MTYPE:
                case BIT:
                case BOOL:
                case BYTE:
                case PID:
                case SHORT:
                case INT:
                case CHAN:
                case XR:
                case XS:
                case IF:
                case DO:
                case ATOMIC:
                case D_STEP:
                case ELSE:
                case BREAK:
                case GOTO:
                case PRINT:
                case ASSERT:
                case LEN:
                case TIMEOUT:
                case NP_:
                case ENABLED:
                case PC_VALUE:
                case RUN:
                case FULL:
                case EMPTY:
                case NFULL:
                case NEMPTY:
                case TRUE:
                case FALSE:
                case SKIP_:
                case VAR_PID:
                case LCURLY:
                case LPAREN:
                case SEMICOLON:
                case RARROW:
                case BNOT:
                case LNOT:
                case MINUS:
                case IDENTIFIER:
                case NUMBER:
                  end = sequence(end, breakNode, inAtomic);
                  break;
                default:
                  jj_la1[47] = jj_gen;
                  ;
                }
                break;
              default:
                jj_la1[48] = jj_gen;
                ;
              }
              break;
            case BREAK:
              t = jj_consume_token(BREAK);
                if(breakNode == null) {
                        {if (true) throw new MyParseException("Breakstatement found without a do-loop to break out of!", t);}
                }
                new GotoTransition(start, breakNode, "break");
                end = new State(automaton, inAtomic);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
              case RARROW:
                delim();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case MTYPE:
                case BIT:
                case BOOL:
                case BYTE:
                case PID:
                case SHORT:
                case INT:
                case CHAN:
                case XR:
                case XS:
                case IF:
                case DO:
                case ATOMIC:
                case D_STEP:
                case ELSE:
                case BREAK:
                case GOTO:
                case PRINT:
                case ASSERT:
                case LEN:
                case TIMEOUT:
                case NP_:
                case ENABLED:
                case PC_VALUE:
                case RUN:
                case FULL:
                case EMPTY:
                case NFULL:
                case NEMPTY:
                case TRUE:
                case FALSE:
                case SKIP_:
                case VAR_PID:
                case LCURLY:
                case LPAREN:
                case SEMICOLON:
                case RARROW:
                case BNOT:
                case LNOT:
                case MINUS:
                case IDENTIFIER:
                case NUMBER:
                  end = sequence(end, breakNode, inAtomic);
                  break;
                default:
                  jj_la1[49] = jj_gen;
                  ;
                }
                break;
              default:
                jj_la1[50] = jj_gen;
                ;
              }
              break;
            case ATOMIC:
              t = jj_consume_token(ATOMIC);
                end = new State(automaton, true);
                new UselessTransition(start, end, "ATOMIC");
              jj_consume_token(LCURLY);
              end = sequence(end, breakNode, true);
              jj_consume_token(RCURLY);
                end.setInAtomic(false);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case MTYPE:
              case BIT:
              case BOOL:
              case BYTE:
              case PID:
              case SHORT:
              case INT:
              case CHAN:
              case XR:
              case XS:
              case IF:
              case DO:
              case ATOMIC:
              case D_STEP:
              case ELSE:
              case BREAK:
              case GOTO:
              case PRINT:
              case ASSERT:
              case LEN:
              case TIMEOUT:
              case NP_:
              case ENABLED:
              case PC_VALUE:
              case RUN:
              case FULL:
              case EMPTY:
              case NFULL:
              case NEMPTY:
              case TRUE:
              case FALSE:
              case SKIP_:
              case VAR_PID:
              case LCURLY:
              case LPAREN:
              case SEMICOLON:
              case RARROW:
              case BNOT:
              case LNOT:
              case MINUS:
              case IDENTIFIER:
              case NUMBER:
                end = sequence(end, breakNode, inAtomic);
                break;
              default:
                jj_la1[51] = jj_gen;
                ;
              }
              break;
            case D_STEP:
              t = jj_consume_token(D_STEP);
                end = new State(automaton, inAtomic);
                trans = start.newTransition(end);
              jj_consume_token(LCURLY);
              dstep_sequence(trans);
              jj_consume_token(RCURLY);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case MTYPE:
              case BIT:
              case BOOL:
              case BYTE:
              case PID:
              case SHORT:
              case INT:
              case CHAN:
              case XR:
              case XS:
              case IF:
              case DO:
              case ATOMIC:
              case D_STEP:
              case ELSE:
              case BREAK:
              case GOTO:
              case PRINT:
              case ASSERT:
              case LEN:
              case TIMEOUT:
              case NP_:
              case ENABLED:
              case PC_VALUE:
              case RUN:
              case FULL:
              case EMPTY:
              case NFULL:
              case NEMPTY:
              case TRUE:
              case FALSE:
              case SKIP_:
              case VAR_PID:
              case LCURLY:
              case LPAREN:
              case SEMICOLON:
              case RARROW:
              case BNOT:
              case LNOT:
              case MINUS:
              case IDENTIFIER:
              case NUMBER:
                end = sequence(end, breakNode, inAtomic);
                break;
              default:
                jj_la1[52] = jj_gen;
                ;
              }
              break;
            case LCURLY:
              jj_consume_token(LCURLY);
              end = sequence(start, breakNode, inAtomic);
              jj_consume_token(RCURLY);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case MTYPE:
              case BIT:
              case BOOL:
              case BYTE:
              case PID:
              case SHORT:
              case INT:
              case CHAN:
              case XR:
              case XS:
              case IF:
              case DO:
              case ATOMIC:
              case D_STEP:
              case ELSE:
              case BREAK:
              case GOTO:
              case PRINT:
              case ASSERT:
              case LEN:
              case TIMEOUT:
              case NP_:
              case ENABLED:
              case PC_VALUE:
              case RUN:
              case FULL:
              case EMPTY:
              case NFULL:
              case NEMPTY:
              case TRUE:
              case FALSE:
              case SKIP_:
              case VAR_PID:
              case LCURLY:
              case LPAREN:
              case SEMICOLON:
              case RARROW:
              case BNOT:
              case LNOT:
              case MINUS:
              case IDENTIFIER:
              case NUMBER:
                end = sequence(end, breakNode, inAtomic);
                break;
              default:
                jj_la1[53] = jj_gen;
                ;
              }
              break;
            default:
              jj_la1[56] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
          {if (true) return end;}
    throw new Error("Missing return statement in function");
  }

  final public void delim() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case RARROW:
      jj_consume_token(RARROW);
      break;
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void option(State start, State end, State breakNode, boolean inAtomic) throws ParseException {
        State tempEnd;
    jj_consume_token(OPTION);
                State s = new State(automaton, inAtomic);
                new UselessTransition(start, s, "OPTION");
    tempEnd = sequence(s, breakNode, inAtomic);
          if(tempEnd != null) end.merge(tempEnd);
  }

  final public State channel_statement(State start, State breakNode, boolean inAtomic) throws ParseException {
        Expression expr;
        Token t;
        State end = new State(automaton, inAtomic);
    expr = varref();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LNOT:
      t = jj_consume_token(LNOT);
                ChannelSendAction send = new ChannelSendAction(t, ((Identifier)expr).getVariable());
                start.newTransition(send, end);
      send_args(send);
      break;
    case CH_SEND_SORTED:
      t = jj_consume_token(CH_SEND_SORTED);
            {if (true) throw new MyParseException("Sorted send is not yet supported!", t);}
      send_args(null);
      break;
    case CH_READ:
      t = jj_consume_token(CH_READ);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EVAL:
      case TRUE:
      case FALSE:
      case SKIP_:
      case VAR_PID:
      case IDENTIFIER:
      case NUMBER:
                  ChannelReadAction read = new ChannelReadAction(t, ((Identifier)expr).getVariable());
                  start.newTransition(read, end);
        recv_args(read);
        break;
      case LT:
                  //ChannelCopyAction copy = new ChannelCopyAction(t, ((Identifier)expr).getVariable());
                  //start.newTransition(copy, end);
                  {if (true) throw new MyParseException("Non-removing receive is not yet supported!", t);}
        jj_consume_token(LT);
        recv_args(null);
        jj_consume_token(GT);
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case CH_READ_RAND:
      t = jj_consume_token(CH_READ_RAND);
            {if (true) throw new MyParseException("Random receive from channels is not yet supported!", t);}
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EVAL:
      case TRUE:
      case FALSE:
      case SKIP_:
      case VAR_PID:
      case IDENTIFIER:
      case NUMBER:
        recv_args(null);
        break;
      case LT:
        jj_consume_token(LT);
        recv_args(null);
        jj_consume_token(GT);
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return end;}
    throw new Error("Missing return statement in function");
  }

  final public State assign(State start, State breakNode, boolean inAtomic) throws ParseException {
        Identifier id;
        Expression expr;
        Token t;
        State end = new State(automaton, inAtomic);
    expr = varref();
                try {
                        id = (Identifier)expr;
                } catch(ClassCastException ex) {
                        {if (true) throw new MyParseException("Not a valid identifier on the left side of the assignment", expr.getToken());}
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      t = jj_consume_token(ASSIGN);
      expr = lor_expr();
            start.newTransition(new AssignAction(t, id, expr), end);
      break;
    case INCR:
      t = jj_consume_token(INCR);
            start.newTransition(new AssignAction(t, id), end);
      break;
    case DECR:
      t = jj_consume_token(DECR);
            start.newTransition(new AssignAction(t, id), end);
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return end;}
    throw new Error("Missing return statement in function");
  }

/*** Special dstep statement parsing ***/
  final public void dstep_sequence(ActionContainer cont) throws ParseException {
        Token t;
        Expression expr;
        OptionAction opt;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
    case RARROW:
      delim();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MTYPE:
      case BIT:
      case BOOL:
      case BYTE:
      case PID:
      case SHORT:
      case INT:
      case CHAN:
      case XR:
      case XS:
      case IF:
      case DO:
      case ATOMIC:
      case D_STEP:
      case ELSE:
      case BREAK:
      case GOTO:
      case PRINT:
      case ASSERT:
      case LEN:
      case TIMEOUT:
      case NP_:
      case ENABLED:
      case PC_VALUE:
      case RUN:
      case FULL:
      case EMPTY:
      case NFULL:
      case NEMPTY:
      case TRUE:
      case FALSE:
      case SKIP_:
      case VAR_PID:
      case LCURLY:
      case LPAREN:
      case SEMICOLON:
      case RARROW:
      case BNOT:
      case LNOT:
      case MINUS:
      case IDENTIFIER:
      case NUMBER:
        dstep_sequence(cont);
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[93] = jj_gen;
      if (jj_2_6(2147483647)) {
          {if (true) throw new ParseException("Variables can not be declared inside a d_step");}
        one_decl(null);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
        case RARROW:
          delim();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MTYPE:
          case BIT:
          case BOOL:
          case BYTE:
          case PID:
          case SHORT:
          case INT:
          case CHAN:
          case XR:
          case XS:
          case IF:
          case DO:
          case ATOMIC:
          case D_STEP:
          case ELSE:
          case BREAK:
          case GOTO:
          case PRINT:
          case ASSERT:
          case LEN:
          case TIMEOUT:
          case NP_:
          case ENABLED:
          case PC_VALUE:
          case RUN:
          case FULL:
          case EMPTY:
          case NFULL:
          case NEMPTY:
          case TRUE:
          case FALSE:
          case SKIP_:
          case VAR_PID:
          case LCURLY:
          case LPAREN:
          case SEMICOLON:
          case RARROW:
          case BNOT:
          case LNOT:
          case MINUS:
          case IDENTIFIER:
          case NUMBER:
            dstep_sequence(cont);
            break;
          default:
            jj_la1[63] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[64] = jj_gen;
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case XR:
        case XS:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case XR:
            t = jj_consume_token(XR);
            break;
          case XS:
            t = jj_consume_token(XS);
            break;
          default:
            jj_la1[65] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          expr = varref();
          {if (true) throw new MyParseException("Can not declare exclusive reads or writes in a d_step", t);}
          label_11:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[66] = jj_gen;
              break label_11;
            }
            jj_consume_token(COMMA);
            expr = varref();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEMICOLON:
          case RARROW:
            delim();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case MTYPE:
            case BIT:
            case BOOL:
            case BYTE:
            case PID:
            case SHORT:
            case INT:
            case CHAN:
            case XR:
            case XS:
            case IF:
            case DO:
            case ATOMIC:
            case D_STEP:
            case ELSE:
            case BREAK:
            case GOTO:
            case PRINT:
            case ASSERT:
            case LEN:
            case TIMEOUT:
            case NP_:
            case ENABLED:
            case PC_VALUE:
            case RUN:
            case FULL:
            case EMPTY:
            case NFULL:
            case NEMPTY:
            case TRUE:
            case FALSE:
            case SKIP_:
            case VAR_PID:
            case LCURLY:
            case LPAREN:
            case SEMICOLON:
            case RARROW:
            case BNOT:
            case LNOT:
            case MINUS:
            case IDENTIFIER:
            case NUMBER:
              dstep_sequence(cont);
              break;
            default:
              jj_la1[67] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[68] = jj_gen;
            ;
          }
          break;
        case IF:
          t = jj_consume_token(IF);
          opt = new OptionAction(t, false); cont.addAction(opt);
          label_12:
          while (true) {
            dstep_option(opt);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case OPTION:
              ;
              break;
            default:
              jj_la1[69] = jj_gen;
              break label_12;
            }
          }
          jj_consume_token(FI);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MTYPE:
          case BIT:
          case BOOL:
          case BYTE:
          case PID:
          case SHORT:
          case INT:
          case CHAN:
          case XR:
          case XS:
          case IF:
          case DO:
          case ATOMIC:
          case D_STEP:
          case ELSE:
          case BREAK:
          case GOTO:
          case PRINT:
          case ASSERT:
          case LEN:
          case TIMEOUT:
          case NP_:
          case ENABLED:
          case PC_VALUE:
          case RUN:
          case FULL:
          case EMPTY:
          case NFULL:
          case NEMPTY:
          case TRUE:
          case FALSE:
          case SKIP_:
          case VAR_PID:
          case LCURLY:
          case LPAREN:
          case SEMICOLON:
          case RARROW:
          case BNOT:
          case LNOT:
          case MINUS:
          case IDENTIFIER:
          case NUMBER:
            dstep_sequence(cont);
            break;
          default:
            jj_la1[70] = jj_gen;
            ;
          }
          break;
        case DO:
          t = jj_consume_token(DO);
          opt = new OptionAction(t, true); cont.addAction(opt);
          label_13:
          while (true) {
            dstep_option(opt);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case OPTION:
              ;
              break;
            default:
              jj_la1[71] = jj_gen;
              break label_13;
            }
          }
          jj_consume_token(OD);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MTYPE:
          case BIT:
          case BOOL:
          case BYTE:
          case PID:
          case SHORT:
          case INT:
          case CHAN:
          case XR:
          case XS:
          case IF:
          case DO:
          case ATOMIC:
          case D_STEP:
          case ELSE:
          case BREAK:
          case GOTO:
          case PRINT:
          case ASSERT:
          case LEN:
          case TIMEOUT:
          case NP_:
          case ENABLED:
          case PC_VALUE:
          case RUN:
          case FULL:
          case EMPTY:
          case NFULL:
          case NEMPTY:
          case TRUE:
          case FALSE:
          case SKIP_:
          case VAR_PID:
          case LCURLY:
          case LPAREN:
          case SEMICOLON:
          case RARROW:
          case BNOT:
          case LNOT:
          case MINUS:
          case IDENTIFIER:
          case NUMBER:
            dstep_sequence(cont);
            break;
          default:
            jj_la1[72] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[94] = jj_gen;
          if (jj_2_7(2147483647)) {
            jj_consume_token(IDENTIFIER);
            t = jj_consume_token(COLON);
          {if (true) throw new MyParseException("Goto-labels are not supported in a d_step", t);}
            dstep_sequence(cont);
          } else if (jj_2_8(2147483647)) {
            dstep_channel_statement(cont);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SEMICOLON:
            case RARROW:
              delim();
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case MTYPE:
              case BIT:
              case BOOL:
              case BYTE:
              case PID:
              case SHORT:
              case INT:
              case CHAN:
              case XR:
              case XS:
              case IF:
              case DO:
              case ATOMIC:
              case D_STEP:
              case ELSE:
              case BREAK:
              case GOTO:
              case PRINT:
              case ASSERT:
              case LEN:
              case TIMEOUT:
              case NP_:
              case ENABLED:
              case PC_VALUE:
              case RUN:
              case FULL:
              case EMPTY:
              case NFULL:
              case NEMPTY:
              case TRUE:
              case FALSE:
              case SKIP_:
              case VAR_PID:
              case LCURLY:
              case LPAREN:
              case SEMICOLON:
              case RARROW:
              case BNOT:
              case LNOT:
              case MINUS:
              case IDENTIFIER:
              case NUMBER:
                dstep_sequence(cont);
                break;
              default:
                jj_la1[73] = jj_gen;
                ;
              }
              break;
            default:
              jj_la1[74] = jj_gen;
              ;
            }
          } else if (jj_2_9(2147483647)) {
            dstep_assign(cont);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SEMICOLON:
            case RARROW:
              delim();
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case MTYPE:
              case BIT:
              case BOOL:
              case BYTE:
              case PID:
              case SHORT:
              case INT:
              case CHAN:
              case XR:
              case XS:
              case IF:
              case DO:
              case ATOMIC:
              case D_STEP:
              case ELSE:
              case BREAK:
              case GOTO:
              case PRINT:
              case ASSERT:
              case LEN:
              case TIMEOUT:
              case NP_:
              case ENABLED:
              case PC_VALUE:
              case RUN:
              case FULL:
              case EMPTY:
              case NFULL:
              case NEMPTY:
              case TRUE:
              case FALSE:
              case SKIP_:
              case VAR_PID:
              case LCURLY:
              case LPAREN:
              case SEMICOLON:
              case RARROW:
              case BNOT:
              case LNOT:
              case MINUS:
              case IDENTIFIER:
              case NUMBER:
                dstep_sequence(cont);
                break;
              default:
                jj_la1[75] = jj_gen;
                ;
              }
              break;
            default:
              jj_la1[76] = jj_gen;
              ;
            }
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LEN:
            case TIMEOUT:
            case NP_:
            case ENABLED:
            case PC_VALUE:
            case RUN:
            case FULL:
            case EMPTY:
            case NFULL:
            case NEMPTY:
            case TRUE:
            case FALSE:
            case SKIP_:
            case VAR_PID:
            case LPAREN:
            case BNOT:
            case LNOT:
            case MINUS:
            case IDENTIFIER:
            case NUMBER:
              expr = expr();
          cont.addAction(new ExprAction(expr));
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
              case RARROW:
                delim();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case MTYPE:
                case BIT:
                case BOOL:
                case BYTE:
                case PID:
                case SHORT:
                case INT:
                case CHAN:
                case XR:
                case XS:
                case IF:
                case DO:
                case ATOMIC:
                case D_STEP:
                case ELSE:
                case BREAK:
                case GOTO:
                case PRINT:
                case ASSERT:
                case LEN:
                case TIMEOUT:
                case NP_:
                case ENABLED:
                case PC_VALUE:
                case RUN:
                case FULL:
                case EMPTY:
                case NFULL:
                case NEMPTY:
                case TRUE:
                case FALSE:
                case SKIP_:
                case VAR_PID:
                case LCURLY:
                case LPAREN:
                case SEMICOLON:
                case RARROW:
                case BNOT:
                case LNOT:
                case MINUS:
                case IDENTIFIER:
                case NUMBER:
                  dstep_sequence(cont);
                  break;
                default:
                  jj_la1[77] = jj_gen;
                  ;
                }
                break;
              default:
                jj_la1[78] = jj_gen;
                ;
              }
              break;
            case ELSE:
              t = jj_consume_token(ELSE);
          cont.addAction(new ElseAction(t));
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
              case RARROW:
                delim();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case MTYPE:
                case BIT:
                case BOOL:
                case BYTE:
                case PID:
                case SHORT:
                case INT:
                case CHAN:
                case XR:
                case XS:
                case IF:
                case DO:
                case ATOMIC:
                case D_STEP:
                case ELSE:
                case BREAK:
                case GOTO:
                case PRINT:
                case ASSERT:
                case LEN:
                case TIMEOUT:
                case NP_:
                case ENABLED:
                case PC_VALUE:
                case RUN:
                case FULL:
                case EMPTY:
                case NFULL:
                case NEMPTY:
                case TRUE:
                case FALSE:
                case SKIP_:
                case VAR_PID:
                case LCURLY:
                case LPAREN:
                case SEMICOLON:
                case RARROW:
                case BNOT:
                case LNOT:
                case MINUS:
                case IDENTIFIER:
                case NUMBER:
                  dstep_sequence(cont);
                  break;
                default:
                  jj_la1[79] = jj_gen;
                  ;
                }
                break;
              default:
                jj_la1[80] = jj_gen;
                ;
              }
              break;
            case GOTO:
              t = jj_consume_token(GOTO);
              jj_consume_token(IDENTIFIER);
          {if (true) throw new MyParseException("Goto-statements are not supported in a d_step", t);}
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
              case RARROW:
                delim();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case MTYPE:
                case BIT:
                case BOOL:
                case BYTE:
                case PID:
                case SHORT:
                case INT:
                case CHAN:
                case XR:
                case XS:
                case IF:
                case DO:
                case ATOMIC:
                case D_STEP:
                case ELSE:
                case BREAK:
                case GOTO:
                case PRINT:
                case ASSERT:
                case LEN:
                case TIMEOUT:
                case NP_:
                case ENABLED:
                case PC_VALUE:
                case RUN:
                case FULL:
                case EMPTY:
                case NFULL:
                case NEMPTY:
                case TRUE:
                case FALSE:
                case SKIP_:
                case VAR_PID:
                case LCURLY:
                case LPAREN:
                case SEMICOLON:
                case RARROW:
                case BNOT:
                case LNOT:
                case MINUS:
                case IDENTIFIER:
                case NUMBER:
                  dstep_sequence(cont);
                  break;
                default:
                  jj_la1[81] = jj_gen;
                  ;
                }
                break;
              default:
                jj_la1[82] = jj_gen;
                ;
              }
              break;
            case PRINT:
              t = jj_consume_token(PRINT);
              jj_consume_token(LPAREN);
              jj_consume_token(STRING);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                jj_consume_token(COMMA);
                arg_lst(null);
                break;
              default:
                jj_la1[83] = jj_gen;
                ;
              }
              jj_consume_token(RPAREN);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
              case RARROW:
                delim();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case MTYPE:
                case BIT:
                case BOOL:
                case BYTE:
                case PID:
                case SHORT:
                case INT:
                case CHAN:
                case XR:
                case XS:
                case IF:
                case DO:
                case ATOMIC:
                case D_STEP:
                case ELSE:
                case BREAK:
                case GOTO:
                case PRINT:
                case ASSERT:
                case LEN:
                case TIMEOUT:
                case NP_:
                case ENABLED:
                case PC_VALUE:
                case RUN:
                case FULL:
                case EMPTY:
                case NFULL:
                case NEMPTY:
                case TRUE:
                case FALSE:
                case SKIP_:
                case VAR_PID:
                case LCURLY:
                case LPAREN:
                case SEMICOLON:
                case RARROW:
                case BNOT:
                case LNOT:
                case MINUS:
                case IDENTIFIER:
                case NUMBER:
                  dstep_sequence(cont);
                  break;
                default:
                  jj_la1[84] = jj_gen;
                  ;
                }
                break;
              default:
                jj_la1[85] = jj_gen;
                ;
              }
              break;
            case ASSERT:
              t = jj_consume_token(ASSERT);
              expr = expr();
          cont.addAction(new AssertAction(t, expr));
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
              case RARROW:
                delim();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case MTYPE:
                case BIT:
                case BOOL:
                case BYTE:
                case PID:
                case SHORT:
                case INT:
                case CHAN:
                case XR:
                case XS:
                case IF:
                case DO:
                case ATOMIC:
                case D_STEP:
                case ELSE:
                case BREAK:
                case GOTO:
                case PRINT:
                case ASSERT:
                case LEN:
                case TIMEOUT:
                case NP_:
                case ENABLED:
                case PC_VALUE:
                case RUN:
                case FULL:
                case EMPTY:
                case NFULL:
                case NEMPTY:
                case TRUE:
                case FALSE:
                case SKIP_:
                case VAR_PID:
                case LCURLY:
                case LPAREN:
                case SEMICOLON:
                case RARROW:
                case BNOT:
                case LNOT:
                case MINUS:
                case IDENTIFIER:
                case NUMBER:
                  dstep_sequence(cont);
                  break;
                default:
                  jj_la1[86] = jj_gen;
                  ;
                }
                break;
              default:
                jj_la1[87] = jj_gen;
                ;
              }
              break;
            case BREAK:
              t = jj_consume_token(BREAK);
          cont.addAction(new BreakAction(t));
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
              case RARROW:
                delim();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case MTYPE:
                case BIT:
                case BOOL:
                case BYTE:
                case PID:
                case SHORT:
                case INT:
                case CHAN:
                case XR:
                case XS:
                case IF:
                case DO:
                case ATOMIC:
                case D_STEP:
                case ELSE:
                case BREAK:
                case GOTO:
                case PRINT:
                case ASSERT:
                case LEN:
                case TIMEOUT:
                case NP_:
                case ENABLED:
                case PC_VALUE:
                case RUN:
                case FULL:
                case EMPTY:
                case NFULL:
                case NEMPTY:
                case TRUE:
                case FALSE:
                case SKIP_:
                case VAR_PID:
                case LCURLY:
                case LPAREN:
                case SEMICOLON:
                case RARROW:
                case BNOT:
                case LNOT:
                case MINUS:
                case IDENTIFIER:
                case NUMBER:
                  dstep_sequence(cont);
                  break;
                default:
                  jj_la1[88] = jj_gen;
                  ;
                }
                break;
              default:
                jj_la1[89] = jj_gen;
                ;
              }
              break;
            case ATOMIC:
              t = jj_consume_token(ATOMIC);
              jj_consume_token(LCURLY);
              dstep_sequence(cont);
              jj_consume_token(RCURLY);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case MTYPE:
              case BIT:
              case BOOL:
              case BYTE:
              case PID:
              case SHORT:
              case INT:
              case CHAN:
              case XR:
              case XS:
              case IF:
              case DO:
              case ATOMIC:
              case D_STEP:
              case ELSE:
              case BREAK:
              case GOTO:
              case PRINT:
              case ASSERT:
              case LEN:
              case TIMEOUT:
              case NP_:
              case ENABLED:
              case PC_VALUE:
              case RUN:
              case FULL:
              case EMPTY:
              case NFULL:
              case NEMPTY:
              case TRUE:
              case FALSE:
              case SKIP_:
              case VAR_PID:
              case LCURLY:
              case LPAREN:
              case SEMICOLON:
              case RARROW:
              case BNOT:
              case LNOT:
              case MINUS:
              case IDENTIFIER:
              case NUMBER:
                dstep_sequence(cont);
                break;
              default:
                jj_la1[90] = jj_gen;
                ;
              }
              break;
            case D_STEP:
              t = jj_consume_token(D_STEP);
              jj_consume_token(LCURLY);
              dstep_sequence(cont);
              jj_consume_token(RCURLY);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case MTYPE:
              case BIT:
              case BOOL:
              case BYTE:
              case PID:
              case SHORT:
              case INT:
              case CHAN:
              case XR:
              case XS:
              case IF:
              case DO:
              case ATOMIC:
              case D_STEP:
              case ELSE:
              case BREAK:
              case GOTO:
              case PRINT:
              case ASSERT:
              case LEN:
              case TIMEOUT:
              case NP_:
              case ENABLED:
              case PC_VALUE:
              case RUN:
              case FULL:
              case EMPTY:
              case NFULL:
              case NEMPTY:
              case TRUE:
              case FALSE:
              case SKIP_:
              case VAR_PID:
              case LCURLY:
              case LPAREN:
              case SEMICOLON:
              case RARROW:
              case BNOT:
              case LNOT:
              case MINUS:
              case IDENTIFIER:
              case NUMBER:
                dstep_sequence(cont);
                break;
              default:
                jj_la1[91] = jj_gen;
                ;
              }
              break;
            case LCURLY:
              jj_consume_token(LCURLY);
              dstep_sequence(cont);
              jj_consume_token(RCURLY);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case MTYPE:
              case BIT:
              case BOOL:
              case BYTE:
              case PID:
              case SHORT:
              case INT:
              case CHAN:
              case XR:
              case XS:
              case IF:
              case DO:
              case ATOMIC:
              case D_STEP:
              case ELSE:
              case BREAK:
              case GOTO:
              case PRINT:
              case ASSERT:
              case LEN:
              case TIMEOUT:
              case NP_:
              case ENABLED:
              case PC_VALUE:
              case RUN:
              case FULL:
              case EMPTY:
              case NFULL:
              case NEMPTY:
              case TRUE:
              case FALSE:
              case SKIP_:
              case VAR_PID:
              case LCURLY:
              case LPAREN:
              case SEMICOLON:
              case RARROW:
              case BNOT:
              case LNOT:
              case MINUS:
              case IDENTIFIER:
              case NUMBER:
                dstep_sequence(cont);
                break;
              default:
                jj_la1[92] = jj_gen;
                ;
              }
              break;
            default:
              jj_la1[95] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
  }

  final public void dstep_option(OptionAction opt) throws ParseException {
        Sequence seq;
    jj_consume_token(OPTION);
          seq = opt.startNewOption();
    dstep_sequence(seq);
  }

  final public void dstep_channel_statement(ActionContainer cont) throws ParseException {
        Token t;
    varref();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LNOT:
      t = jj_consume_token(LNOT);
            {if (true) throw new MyParseException("d_step: channel send is not yet supported!", t);}
      send_args(null);
      break;
    case CH_SEND_SORTED:
      t = jj_consume_token(CH_SEND_SORTED);
            {if (true) throw new MyParseException("d_step: sorted send is not yet supported!", t);}
      send_args(null);
      break;
    case CH_READ:
      t = jj_consume_token(CH_READ);
            {if (true) throw new MyParseException("d_step: channel receive is not yet supported!", t);}
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EVAL:
      case TRUE:
      case FALSE:
      case SKIP_:
      case VAR_PID:
      case IDENTIFIER:
      case NUMBER:
        recv_args(null);
        break;
      case LT:
        jj_consume_token(LT);
        recv_args(null);
        jj_consume_token(GT);
        break;
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case CH_READ_RAND:
      t = jj_consume_token(CH_READ_RAND);
            {if (true) throw new MyParseException("d_step: random receive from channels is not yet supported!", t);}
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EVAL:
      case TRUE:
      case FALSE:
      case SKIP_:
      case VAR_PID:
      case IDENTIFIER:
      case NUMBER:
        recv_args(null);
        break;
      case LT:
        jj_consume_token(LT);
        recv_args(null);
        jj_consume_token(GT);
        break;
      default:
        jj_la1[97] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[98] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void dstep_assign(ActionContainer cont) throws ParseException {
        Identifier id;
        Expression expr;
        Token t;
    expr = varref();
                try {
                        id = (Identifier)expr;
                } catch(ClassCastException ex) {
                        {if (true) throw new MyParseException("Not a valid identifier on the left side of the assignment", expr.getToken());}
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      t = jj_consume_token(ASSIGN);
      expr = lor_expr();
                cont.addAction(new AssignAction(t, id, expr));
      break;
    case INCR:
      t = jj_consume_token(INCR);
                cont.addAction(new AssignAction(t, id, null));
      break;
    case DECR:
      t = jj_consume_token(DECR);
                cont.addAction(new AssignAction(t, id, null));
      break;
    default:
      jj_la1[99] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*** Arguments parsing ***/
  final public void send_args(CompoundExpression c) throws ParseException {
        Expression expr;
    if (jj_2_10(2147483647)) {
      expr = lor_expr();
          c.addExpression(expr);
      jj_consume_token(LPAREN);
      arg_lst(c);
      jj_consume_token(RPAREN);
    } else {
      arg_lst(c);
    }
  }

  final public void recv_args(CompoundExpression c) throws ParseException {
    recv_arg(c);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case COMMA:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        label_14:
        while (true) {
          jj_consume_token(COMMA);
          recv_arg(c);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[100] = jj_gen;
            break label_14;
          }
        }
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        recv_args(c);
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[101] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[102] = jj_gen;
      ;
    }
  }

  final public void recv_arg(CompoundExpression c) throws ParseException {
        Token t;
        Expression expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR_PID:
    case IDENTIFIER:
      expr = varref();
          c.addExpression(expr);
      break;
    case EVAL:
      t = jj_consume_token(EVAL);
      jj_consume_token(LPAREN);
      expr = varref();
      jj_consume_token(RPAREN);
          c.addExpression(new EvalExpression(t, expr));
      break;
    case TRUE:
    case FALSE:
    case SKIP_:
    case NUMBER:
      expr = constant();
          c.addExpression(expr);
      break;
    default:
      jj_la1[103] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void arg_lst(CompoundExpression expr) throws ParseException {
        Expression ex1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEN:
    case TIMEOUT:
    case NP_:
    case ENABLED:
    case PC_VALUE:
    case RUN:
    case FULL:
    case EMPTY:
    case NFULL:
    case NEMPTY:
    case TRUE:
    case FALSE:
    case SKIP_:
    case VAR_PID:
    case LPAREN:
    case BNOT:
    case LNOT:
    case MINUS:
    case IDENTIFIER:
    case NUMBER:
      ex1 = lor_expr();
          expr.addExpression(ex1);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[104] = jj_gen;
          break label_15;
        }
        jj_consume_token(COMMA);
        ex1 = lor_expr();
          expr.addExpression(ex1);
      }
      break;
    default:
      jj_la1[105] = jj_gen;
      ;
    }
  }

/*** All expression statements ***/
  final public Expression varref() throws ParseException {
        Token id;
        Expression expr = null;
        Identifier ident;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      id = jj_consume_token(IDENTIFIER);
                int mtypeNr = specification.getMType(id.image);
                if(mtypeNr >= 0) {
                        {if (true) return new MTypeReference(id, mtypeNr);}
                }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACK:
        jj_consume_token(LBRACK);
        expr = lor_expr();
        jj_consume_token(RBRACK);
        break;
      default:
        jj_la1[106] = jj_gen;
        ;
      }
                if(currentProc != null && currentProc.hasVariable(id.image)) {
                        ident = new Identifier(id, currentProc.getVariable(id.image), expr);
                } else if(specification.getVariableStore().hasVariable(id.image)) {
                        ident = new Identifier(id, specification.getVariableStore().getVariable(id.image), expr);
                } else {
                        {if (true) throw new MyParseException("Undeclared identifier: " + id.image, id);}
                }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        id = jj_consume_token(DOT);
        expr = varref();
          {if (true) throw new MyParseException("User defined types not yet supported!", id);}
        break;
      default:
        jj_la1[107] = jj_gen;
        ;
      }
          {if (true) return ident;}
      break;
    case VAR_PID:
      id = jj_consume_token(VAR_PID);
          {if (true) return new Identifier(id, _pid, null);}
      break;
    default:
      jj_la1[108] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression base_expr() throws ParseException {
        Expression ex1, ex2, ex3;
        Token t, id;
    if (jj_2_11(2147483647)) {
      jj_consume_token(LPAREN);
      ex1 = lor_expr();
      t = jj_consume_token(RARROW);
      ex2 = lor_expr();
      jj_consume_token(COLON);
      ex3 = lor_expr();
      jj_consume_token(RPAREN);
          {if (true) return new AritmicExpression(t, ex1, ex2, ex3);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        ex1 = expr();
        jj_consume_token(RPAREN);
          {if (true) return ex1;}
        break;
      case LEN:
        t = jj_consume_token(LEN);
        jj_consume_token(LPAREN);
        ex1 = varref();
        jj_consume_token(RPAREN);
          {if (true) return new ChannelLengthExpression(t, ex1);}
        break;
      default:
        jj_la1[111] = jj_gen;
        if (jj_2_12(2147483647)) {
          t = jj_consume_token(IDENTIFIER);
          jj_consume_token(LBRACK);
          lor_expr();
          jj_consume_token(RBRACK);
          jj_consume_token(AT);
          jj_consume_token(IDENTIFIER);
          {if (true) throw new MyParseException("At expressions are not yet supported!", t);}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VAR_PID:
          case IDENTIFIER:
            ex1 = varref();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CH_READ:
            case CH_READ_RAND:
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case CH_READ:
                t = jj_consume_token(CH_READ);
                jj_consume_token(LBRACK);
                recv_args(null);
                jj_consume_token(RBRACK);
            {if (true) throw new MyParseException("Channel read with brackets are not yet supported!", t);}
                break;
              case CH_READ_RAND:
                t = jj_consume_token(CH_READ_RAND);
                jj_consume_token(LBRACK);
                recv_args(null);
                jj_consume_token(RBRACK);
            {if (true) throw new MyParseException("Channel random read with brackets are not yet supported!", t);}
                break;
              default:
                jj_la1[109] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
            default:
              jj_la1[110] = jj_gen;
              ;
            }
          {if (true) return ex1;}
            break;
          case TRUE:
          case FALSE:
          case SKIP_:
          case NUMBER:
            ex1 = constant();
          {if (true) return ex1;}
            break;
          case TIMEOUT:
            t = jj_consume_token(TIMEOUT);
          {if (true) return new TimeoutExpression(t);}
            break;
          case NP_:
            t = jj_consume_token(NP_);
          {if (true) throw new MyParseException("np_ expressions are not yet supported!", t);}
            break;
          case ENABLED:
            t = jj_consume_token(ENABLED);
            jj_consume_token(LPAREN);
            lor_expr();
            jj_consume_token(RPAREN);
          {if (true) throw new MyParseException("enabled expressions are not yet supported!", t);}
            break;
          case PC_VALUE:
            t = jj_consume_token(PC_VALUE);
            jj_consume_token(LPAREN);
            lor_expr();
            jj_consume_token(RPAREN);
          {if (true) throw new MyParseException("pc_value expressions are not yet supported!", t);}
            break;
          case RUN:
            t = jj_consume_token(RUN);
            id = jj_consume_token(IDENTIFIER);
          RunExpression runExpr = new RunExpression(t, specification, id.image);
            jj_consume_token(LPAREN);
            arg_lst(runExpr);
            jj_consume_token(RPAREN);
          {if (true) return runExpr;}
            break;
          case FULL:
          case EMPTY:
          case NFULL:
          case NEMPTY:
            t = chanop();
            jj_consume_token(LPAREN);
            ex1 = varref();
            jj_consume_token(RPAREN);
          {if (true) return new ChannelOperation(t, ex1);}
            break;
          default:
            jj_la1[112] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression unary_expr() throws ParseException {
        Expression ex1;
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BNOT:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BNOT:
        t = jj_consume_token(BNOT);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[113] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ex1 = unary_expr();
          {if (true) return new AritmicExpression(t, ex1);}
      break;
    case LNOT:
      t = jj_consume_token(LNOT);
      ex1 = unary_expr();
          {if (true) return new BooleanExpression(t, ex1);}
      break;
    case LEN:
    case TIMEOUT:
    case NP_:
    case ENABLED:
    case PC_VALUE:
    case RUN:
    case FULL:
    case EMPTY:
    case NFULL:
    case NEMPTY:
    case TRUE:
    case FALSE:
    case SKIP_:
    case VAR_PID:
    case LPAREN:
    case IDENTIFIER:
    case NUMBER:
      ex1 = base_expr();
          {if (true) return ex1;}
      break;
    default:
      jj_la1[114] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression mul_expr() throws ParseException {
        Expression ex1, ex2;
        Token t;
    ex1 = unary_expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIMES:
    case DIVIDE:
    case MODULO:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        t = jj_consume_token(TIMES);
        break;
      case DIVIDE:
        t = jj_consume_token(DIVIDE);
        break;
      case MODULO:
        t = jj_consume_token(MODULO);
        break;
      default:
        jj_la1[115] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ex2 = mul_expr();
            {if (true) return new AritmicExpression(t, ex1, ex2);}
      break;
    default:
      jj_la1[116] = jj_gen;
      ;
    }
          {if (true) return ex1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression add_expr() throws ParseException {
        Expression ex1, ex2;
        Token t;
    ex1 = mul_expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case PLUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[117] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ex2 = add_expr();
            {if (true) return new AritmicExpression(t, ex1, ex2);}
      break;
    default:
      jj_la1[118] = jj_gen;
      ;
    }
          {if (true) return ex1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression shift_expr() throws ParseException {
        Expression ex1, ex2;
        Token t;
    ex1 = add_expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSHIFT:
    case RSHIFT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        t = jj_consume_token(LSHIFT);
        break;
      case RSHIFT:
        t = jj_consume_token(RSHIFT);
        break;
      default:
        jj_la1[119] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ex2 = shift_expr();
            {if (true) return new AritmicExpression(t, ex1, ex2);}
      break;
    default:
      jj_la1[120] = jj_gen;
      ;
    }
          {if (true) return ex1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression cmp_expr() throws ParseException {
        Expression ex1, ex2;
        Token t;
    ex1 = shift_expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
    case LTE:
    case GT:
    case GTE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        t = jj_consume_token(LT);
        break;
      case GT:
        t = jj_consume_token(GT);
        break;
      case LTE:
        t = jj_consume_token(LTE);
        break;
      case GTE:
        t = jj_consume_token(GTE);
        break;
      default:
        jj_la1[121] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ex2 = cmp_expr();
            {if (true) return new CompareExpression(t, ex1, ex2);}
      break;
    default:
      jj_la1[122] = jj_gen;
      ;
    }
          {if (true) return ex1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression eq_expr() throws ParseException {
        Expression ex1, ex2;
        Token t;
    ex1 = cmp_expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case NEQ:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NEQ:
        t = jj_consume_token(NEQ);
        break;
      default:
        jj_la1[123] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ex2 = eq_expr();
            {if (true) return new CompareExpression(t, ex1, ex2);}
      break;
    default:
      jj_la1[124] = jj_gen;
      ;
    }
          {if (true) return ex1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression and_expr() throws ParseException {
        Expression ex1, ex2;
        Token t;
    ex1 = eq_expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BAND:
      t = jj_consume_token(BAND);
      ex2 = and_expr();
            {if (true) return new AritmicExpression(t, ex1, ex2);}
      break;
    default:
      jj_la1[125] = jj_gen;
      ;
    }
          {if (true) return ex1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression xor_expr() throws ParseException {
        Expression ex1, ex2;
        Token t;
    ex1 = and_expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case XOR:
      t = jj_consume_token(XOR);
      ex2 = xor_expr();
            {if (true) return new AritmicExpression(t, ex1, ex2);}
      break;
    default:
      jj_la1[126] = jj_gen;
      ;
    }
          {if (true) return ex1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression or_expr() throws ParseException {
        Expression ex1, ex2;
        Token t;
    ex1 = xor_expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOR:
      t = jj_consume_token(BOR);
      ex2 = or_expr();
            {if (true) return new AritmicExpression(t, ex1, ex2);}
      break;
    default:
      jj_la1[127] = jj_gen;
      ;
    }
          {if (true) return ex1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression land_expr() throws ParseException {
        Expression ex1, ex2;
        Token t;
    ex1 = or_expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LAND:
      t = jj_consume_token(LAND);
      ex2 = land_expr();
            {if (true) return new BooleanExpression(t, ex1, ex2);}
      break;
    default:
      jj_la1[128] = jj_gen;
      ;
    }
          {if (true) return ex1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression lor_expr() throws ParseException {
        Expression ex1, ex2;
        Token t;
    ex1 = land_expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOR:
      t = jj_consume_token(LOR);
      ex2 = lor_expr();
            {if (true) return new BooleanExpression(t, ex1, ex2);}
      break;
    default:
      jj_la1[129] = jj_gen;
      ;
    }
          {if (true) return ex1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression expr() throws ParseException {
        Expression ex1;
    ex1 = lor_expr();
          {if (true) return ex1;}
    throw new Error("Missing return statement in function");
  }

  final public Token chanop() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FULL:
      t = jj_consume_token(FULL);
      break;
    case NFULL:
      t = jj_consume_token(NFULL);
      break;
    case EMPTY:
      t = jj_consume_token(EMPTY);
      break;
    case NEMPTY:
      t = jj_consume_token(NEMPTY);
      break;
    default:
      jj_la1[130] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public ConstantExpression constant() throws ParseException {
        Token n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      n = jj_consume_token(TRUE);
          {if (true) return new ConstantExpression(n, 1);}
      break;
    case FALSE:
      n = jj_consume_token(FALSE);
          {if (true) return new ConstantExpression(n, 0);}
      break;
    case SKIP_:
      n = jj_consume_token(SKIP_);
          {if (true) return new ConstantExpression(n, 1);}
      break;
    case NUMBER:
      n = jj_consume_token(NUMBER);
          {if (true) return new ConstantExpression(n, Integer.parseInt(n.image));}
      break;
    default:
      jj_la1[131] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(RBRACK)) return true;
    if (jj_scan_token(OF)) return true;
    if (jj_scan_token(LCURLY)) return true;
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_92()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_78()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(CH_READ_RAND)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(LOR)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_42()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_78()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_101()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(LAND)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(CH_READ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(EVAL)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(CH_SEND_SORTED)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(BOR)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(LNOT)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_78()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    Token xsp;
    if (jj_3R_102()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_102()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    }
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_79()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_84()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = type instanceof ChannelType;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_86()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_83()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(BAND)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_3R_99()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(MTYPE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) jj_scanpos = xsp;
    if (jj_scan_token(LCURLY)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_23()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) return true;
    }
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_103()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_78()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    }
    }
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_105()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(CH_READ_RAND)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_78()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(CH_READ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    return false;
  }

  private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) return true;
    }
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(CH_SEND_SORTED)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_107()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(LNOT)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    }
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_109()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    }
    }
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_111()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(LNOT)) return true;
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    }
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_131()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_scan_token(RUN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_83()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(PC_VALUE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(ENABLED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_scan_token(NP_)) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_scan_token(TIMEOUT)) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(CH_READ_RAND)) return true;
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_78()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RBRACK)) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(CH_READ)) return true;
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_78()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RARROW)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RBRACK)) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(LEN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_129()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RARROW)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(VAR_PID)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(CHAN)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(MTYPE)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(SKIP_)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(PID)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(BIT)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    }
    return false;
  }

  /** Generated Token Manager. */
  public PromelaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[132];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffce,0x40,0xff8e,0x0,0x8000,0x7f80,0x10000,0x20000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7f80,0xf5307f80,0xf5307f80,0x0,0x0,0xf5307f80,0x0,0x0,0xf5307f80,0x0,0x0,0xf5307f80,0x0,0xf5307f80,0xf5307f80,0x0,0xf5307f80,0x0,0xf5307f80,0x0,0xf5307f80,0x0,0xf5307f80,0x0,0x0,0xf5307f80,0x0,0xf5307f80,0x0,0xf5307f80,0x0,0xf5307f80,0xf5307f80,0xf5307f80,0x0,0x5300000,0xf0000000,0x0,0x800000,0x800000,0x0,0x0,0xf5307f80,0xf5307f80,0x0,0x300000,0x0,0xf5307f80,0x0,0x0,0xf5307f80,0x0,0xf5307f80,0xf5307f80,0x0,0xf5307f80,0x0,0xf5307f80,0x0,0xf5307f80,0x0,0xf5307f80,0x0,0x0,0xf5307f80,0x0,0xf5307f80,0x0,0xf5307f80,0x0,0xf5307f80,0xf5307f80,0xf5307f80,0x0,0x5300000,0xf0000000,0x800000,0x800000,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8000000,0x0,0x8000000,0x800000,0x0,0x0,0x0,0x0,0x0,0x100000,0x10000000,0x8000000,0x10000000,0x10000000,0x0,0x800000,0x100000,0x800000,0x100000,0x10000000,0x0,0x2826ffff,0x2826ffff,0x28000000,0x10000000,0x2826ffff,0x28000000,0x10000000,0x2826ffff,0x28000000,0x2000000,0x2826ffff,0x2000000,0x2826ffff,0x2826ffff,0x28000000,0x2826ffff,0x28000000,0x2826ffff,0x28000000,0x2826ffff,0x28000000,0x2826ffff,0x28000000,0x10000000,0x2826ffff,0x28000000,0x2826ffff,0x28000000,0x2826ffff,0x28000000,0x2826ffff,0x2826ffff,0x2826ffff,0x28000000,0x0,0x26ffff,0x28000000,0x2e000,0x2e000,0xc0000000,0x100000,0x2826ffff,0x2826ffff,0x28000000,0x0,0x10000000,0x2826ffff,0x28000000,0x2000000,0x2826ffff,0x2000000,0x2826ffff,0x2826ffff,0x28000000,0x2826ffff,0x28000000,0x2826ffff,0x28000000,0x2826ffff,0x28000000,0x2826ffff,0x28000000,0x10000000,0x2826ffff,0x28000000,0x2826ffff,0x28000000,0x2826ffff,0x28000000,0x2826ffff,0x2826ffff,0x2826ffff,0x28000000,0x0,0x26ffff,0x2e000,0x2e000,0xc0000000,0x100000,0x10000000,0x10200000,0x10200000,0x2e000,0x10000000,0x22fff8,0x800000,0x0,0x20000,0x80000000,0x80000000,0x200008,0x2fff0,0x0,0x22fff8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e00,0xe000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x2000000,0x0,0x2000000,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x2000000,0x600001c,0x600001c,0x0,0x0,0x600001c,0x0,0x0,0x600001c,0x0,0x0,0x600001c,0x0,0x600001c,0x600001c,0x0,0x600001c,0x0,0x600001c,0x0,0x600001c,0x0,0x600001c,0x0,0x0,0x600001c,0x0,0x600001c,0x0,0x600001c,0x0,0x600001c,0x600001c,0x600001c,0x0,0x0,0x600001c,0x0,0x6000800,0x6000800,0x9,0xc00000,0x600001c,0x600001c,0x0,0x0,0x0,0x600001c,0x0,0x0,0x600001c,0x0,0x600001c,0x600001c,0x0,0x600001c,0x0,0x600001c,0x0,0x600001c,0x0,0x600001c,0x0,0x0,0x600001c,0x0,0x600001c,0x0,0x600001c,0x0,0x600001c,0x600001c,0x600001c,0x0,0x0,0x600001c,0x6000800,0x6000800,0x9,0xc00000,0x0,0x0,0x0,0x6000000,0x0,0x600001c,0x0,0x1000000,0x2000000,0x1,0x1,0x0,0x6000000,0x14,0x600001c,0xe0,0xe0,0x110,0x110,0x600,0x600,0x7800,0x7800,0x18000,0x18000,0x20000,0x40000,0x80000,0x100000,0x200000,0x0,0x4000000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[12];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Promela(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Promela(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PromelaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 132; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 132; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Promela(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PromelaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 132; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 132; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Promela(PromelaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 132; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PromelaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 132; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[101];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 132; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 101; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
