/* Generated By:JavaCC: Do not edit this line. PromelaTokenManager.java */
package spinja.promela.compiler.parser;
import spinja.promela.compiler.*;
import spinja.promela.compiler.automaton.*;
import spinja.promela.compiler.expression.*;
import spinja.promela.compiler.variable.*;
import spinja.promela.compiler.actions.*;
import java.io.*;
import java.util.*;

/** Token Manager. */
public class PromelaTokenManager implements PromelaConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1fffffffffffeL) != 0L)
         {
            jjmatchedKind = 89;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0x1fffff08ffffeL) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 1;
            return 1;
         }
         if ((active0 & 0xf700000L) != 0L)
            return 1;
         return -1;
      case 2:
         if ((active0 & 0x12800002900L) != 0L)
            return 1;
         if ((active0 & 0x1fed7f08fd6feL) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0xa20140884604L) != 0L)
            return 1;
         if ((active0 & 0x15cd6b00790faL) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 3;
            return 1;
         }
         return -1;
      case 4:
         if ((active0 & 0x4c0080001098L) != 0L)
            return 1;
         if ((active0 & 0x110d630078062L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 4;
            return 1;
         }
         return -1;
      case 5:
         if ((active0 & 0x1100630048000L) != 0L)
            return 1;
         if ((active0 & 0xd000030062L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 5;
            return 1;
         }
         return -1;
      case 6:
         if ((active0 & 0x5000000060L) != 0L)
            return 1;
         if ((active0 & 0x8000030002L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x10000L);
      case 34:
         return jjStopAtPos(0, 98);
      case 37:
         return jjStopAtPos(0, 71);
      case 38:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);
      case 40:
         return jjStopAtPos(0, 53);
      case 41:
         return jjStopAtPos(0, 54);
      case 42:
         return jjStopAtPos(0, 69);
      case 43:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      case 44:
         return jjStopAtPos(0, 60);
      case 45:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x800000L);
      case 46:
         return jjStopAtPos(0, 88);
      case 47:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L);
      case 58:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 59);
      case 60:
         jjmatchedKind = 75;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1200L);
      case 61:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 62:
         jjmatchedKind = 77;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4400L);
      case 63:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 64:
         return jjStopAtPos(0, 65);
      case 91:
         return jjStopAtPos(0, 55);
      case 93:
         return jjStopAtPos(0, 56);
      case 94:
         return jjStopAtPos(0, 82);
      case 95:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x410008000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x80000700L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x24000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x44040800000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x420002000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1002004L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x80L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x182000000028L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x8400000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x8200030802L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x800000081000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x201000000050L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x300000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 50);
      case 124:
         jjmatchedKind = 83;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000L);
      case 125:
         return jjStopAtPos(0, 51);
      case 126:
         return jjStopAtPos(0, 66);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      case 38:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         break;
      case 42:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         break;
      case 43:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         break;
      case 45:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         break;
      case 58:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         break;
      case 60:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         break;
      case 61:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         else if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         break;
      case 62:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         break;
      case 63:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         break;
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000008000L, active1, 0L);
      case 100:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 1);
         break;
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x100800000008L, active1, 0L);
      case 102:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(1, 22, 1);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 24, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x85000L, active1, 0L);
      case 105:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000040900L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1004000002004L, active1, 0L);
      case 111:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 26, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x100000220L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x2002000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x200280030012L, active1, 0L);
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 21, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000080L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x440L, active1, 0L);
      case 124:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 95:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000804010L);
      case 100:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2800200010004L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1420000000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x101000000000L);
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 1);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 1);
         break;
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x100a1202L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000040L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x460000000L);
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 1);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x100008420L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x280000000000L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x8L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x12L);
      case 100:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(3, 49);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 1);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 1);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x1001400000048L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 108:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 1);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 1);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 110:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 111:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 112:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000080L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1020L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L);
      case 116:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 2, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x40020000000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000020000L);
      case 119:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000020L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 101:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 4, 1);
         else if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 7, 1);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x20040000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10020000L);
      case 107:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 1);
         break;
      case 108:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 114:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 3, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x400010000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L);
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x100200000002L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 121:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x20L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000040L);
      case 102:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      case 110:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 1);
         break;
      case 112:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 1);
         break;
      case 115:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 1);
         break;
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 1);
         break;
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 121:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 1);
         break;
      case 101:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 5, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      case 102:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 6, 1);
         break;
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x2L);
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 1);
         break;
      case 101:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 1, 1);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 39, 1);
         break;
      case 121:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 16, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAdd(2);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 100);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     kind = 99;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 99;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 99)
                     kind = 99;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x200000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\160\162\157\143\164\171\160\145", "\151\156\151\164", 
"\156\145\166\145\162", "\164\162\141\143\145", "\156\157\164\162\141\143\145", 
"\164\171\160\145\144\145\146", "\155\164\171\160\145", "\142\151\164", "\142\157\157\154", 
"\142\171\164\145", "\160\151\144", "\163\150\157\162\164", "\151\156\164", "\143\150\141\156", 
"\141\143\164\151\166\145", "\160\162\151\157\162\151\164\171", "\160\162\157\166\151\144\145\144", 
"\150\151\144\144\145\156", "\163\150\157\167", "\170\162", "\170\163", "\157\146", "\145\166\141\154", 
"\151\146", "\146\151", "\144\157", "\157\144", "\141\164\157\155\151\143", 
"\144\137\163\164\145\160", "\145\154\163\145", "\142\162\145\141\153", "\147\157\164\157", 
"\160\162\151\156\164\146", "\141\163\163\145\162\164", "\154\145\156", "\164\151\155\145\157\165\164", 
"\156\160\137", "\145\156\141\142\154\145\144", "\160\143\137\166\141\154\165\145", 
"\162\165\156", "\146\165\154\154", "\145\155\160\164\171", "\156\146\165\154\154", 
"\156\145\155\160\164\171", "\164\162\165\145", "\146\141\154\163\145", "\163\153\151\160", 
"\165\156\154\145\163\163", "\137\160\151\144", "\173", "\175", "\75", "\50", "\51", "\133", "\135", 
"\72\72", "\72", "\73", "\54", "\55\76", "\41\41", "\77", "\77\77", "\100", "\176", 
"\41", "\55", "\52", "\57", "\45", "\53", "\74\74", "\76\76", "\74", "\74\75", "\76", 
"\76\75", "\75\75", "\41\75", "\46", "\136", "\174", "\46\46", "\174\174", "\53\53", 
"\55\55", "\56", null, null, null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_COMMENT",
   "IN_STRING",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 2, -1, 
   0, 
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0x1007ffffffL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x3f8000000L, 
};
static final long[] jjtoMore = {
   0x0L, 0xc00000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[3];
private final int[] jjstateSet = new int[6];
protected char curChar;
/** Constructor. */
public PromelaTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public PromelaTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 3; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 96)
         {
            jjmatchedKind = 96;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
