/* bench-09-tsp11.sumo - SUMO model of a 11x11 TSP.             */
/* SUMO specification of a TSP, generated with mat2sumo.awk.    */

/* TSP:

   -  25   2  39  42   7 100  49  77   4   4
  94   -  89  60  48  84  19  74  12  70  36
  64  91   -  30  27  38  55   1 100   2  85
  86  47   6   -  98  20  86  15  81  73  99
  19  50  47  98   -  46  10  98  40  69   3
  24  47  10  42  80   -  32  78  83  49  37
  61   3  82  36  81  28   -  86  96  78  69
  84  97  71   8  54  96  42   -  42  39  84
  25  73  44  12  23  31  25  38   -  81  32
  78  29 100  64  61  51  84  20   4   -  74
  20  30  78  22  31   7  56  42  12  69   -

 */
 
short cost;
short loc;
short MINCOST;

short v0;
short v1;
short v2;
short v3;
short v4;
short v5;
short v6;
short v7;
short v8;
short v9;
short v10;

active proctype TSP()
{
  MINCOST=106;
  v0=0;
  v1=0;
  v2=0;
  v3=0;
  v4=0;
  v5=0;
  v6=0;
  v7=0;
  v8=0;
  v9=0;
  v10=0;

  v0=1;
  loc=0;
  do
  ::  (v0*v1*v2*v3*v4*v5*v6*v7*v8*v9*v10*1) == 1 -> break;
  ::  (loc == 0) && 
      (v0*v1*v2*v3*v4*v5*v6*v7*v8*v9*v10*1 == 0) ->
          if
          ::  (v1==0) -> cost = cost + 25; v1 = 1; loc = 1;
          ::  (v2==0) -> cost = cost + 2; v2 = 1; loc = 2;
          ::  (v3==0) -> cost = cost + 39; v3 = 1; loc = 3;
          ::  (v4==0) -> cost = cost + 42; v4 = 1; loc = 4;
          ::  (v5==0) -> cost = cost + 7; v5 = 1; loc = 5;
          ::  (v6==0) -> cost = cost + 100; v6 = 1; loc = 6;
          ::  (v7==0) -> cost = cost + 49; v7 = 1; loc = 7;
          ::  (v8==0) -> cost = cost + 77; v8 = 1; loc = 8;
          ::  (v9==0) -> cost = cost + 4; v9 = 1; loc = 9;
          ::  (v10==0) -> cost = cost + 4; v10 = 1; loc = 10;
          fi;
  ::  (loc == 1) && 
      (v0*v1*v2*v3*v4*v5*v6*v7*v8*v9*v10*1 == 0) ->
          if
          ::  (v2==0) -> cost = cost + 89; v2 = 1; loc = 2;
          ::  (v3==0) -> cost = cost + 60; v3 = 1; loc = 3;
          ::  (v4==0) -> cost = cost + 48; v4 = 1; loc = 4;
          ::  (v5==0) -> cost = cost + 84; v5 = 1; loc = 5;
          ::  (v6==0) -> cost = cost + 19; v6 = 1; loc = 6;
          ::  (v7==0) -> cost = cost + 74; v7 = 1; loc = 7;
          ::  (v8==0) -> cost = cost + 12; v8 = 1; loc = 8;
          ::  (v9==0) -> cost = cost + 70; v9 = 1; loc = 9;
          ::  (v10==0) -> cost = cost + 36; v10 = 1; loc = 10;
          fi;
  ::  (loc == 2) && 
      (v0*v1*v2*v3*v4*v5*v6*v7*v8*v9*v10*1 == 0) ->
          if
          ::  (v1==0) -> cost = cost + 91; v1 = 1; loc = 1;
          ::  (v3==0) -> cost = cost + 30; v3 = 1; loc = 3;
          ::  (v4==0) -> cost = cost + 27; v4 = 1; loc = 4;
          ::  (v5==0) -> cost = cost + 38; v5 = 1; loc = 5;
          ::  (v6==0) -> cost = cost + 55; v6 = 1; loc = 6;
          ::  (v7==0) -> cost = cost + 1; v7 = 1; loc = 7;
          ::  (v8==0) -> cost = cost + 100; v8 = 1; loc = 8;
          ::  (v9==0) -> cost = cost + 2; v9 = 1; loc = 9;
          ::  (v10==0) -> cost = cost + 85; v10 = 1; loc = 10;
          fi;
  ::  (loc == 3) && 
      (v0*v1*v2*v3*v4*v5*v6*v7*v8*v9*v10*1 == 0) ->
          if
          ::  (v1==0) -> cost = cost + 47; v1 = 1; loc = 1;
          ::  (v2==0) -> cost = cost + 6; v2 = 1; loc = 2;
          ::  (v4==0) -> cost = cost + 98; v4 = 1; loc = 4;
          ::  (v5==0) -> cost = cost + 20; v5 = 1; loc = 5;
          ::  (v6==0) -> cost = cost + 86; v6 = 1; loc = 6;
          ::  (v7==0) -> cost = cost + 15; v7 = 1; loc = 7;
          ::  (v8==0) -> cost = cost + 81; v8 = 1; loc = 8;
          ::  (v9==0) -> cost = cost + 73; v9 = 1; loc = 9;
          ::  (v10==0) -> cost = cost + 99; v10 = 1; loc = 10;
          fi;
  ::  (loc == 4) && 
      (v0*v1*v2*v3*v4*v5*v6*v7*v8*v9*v10*1 == 0) ->
          if
          ::  (v1==0) -> cost = cost + 50; v1 = 1; loc = 1;
          ::  (v2==0) -> cost = cost + 47; v2 = 1; loc = 2;
          ::  (v3==0) -> cost = cost + 98; v3 = 1; loc = 3;
          ::  (v5==0) -> cost = cost + 46; v5 = 1; loc = 5;
          ::  (v6==0) -> cost = cost + 10; v6 = 1; loc = 6;
          ::  (v7==0) -> cost = cost + 98; v7 = 1; loc = 7;
          ::  (v8==0) -> cost = cost + 40; v8 = 1; loc = 8;
          ::  (v9==0) -> cost = cost + 69; v9 = 1; loc = 9;
          ::  (v10==0) -> cost = cost + 3; v10 = 1; loc = 10;
          fi;
  ::  (loc == 5) && 
      (v0*v1*v2*v3*v4*v5*v6*v7*v8*v9*v10*1 == 0) ->
          if
          ::  (v1==0) -> cost = cost + 47; v1 = 1; loc = 1;
          ::  (v2==0) -> cost = cost + 10; v2 = 1; loc = 2;
          ::  (v3==0) -> cost = cost + 42; v3 = 1; loc = 3;
          ::  (v4==0) -> cost = cost + 80; v4 = 1; loc = 4;
          ::  (v6==0) -> cost = cost + 32; v6 = 1; loc = 6;
          ::  (v7==0) -> cost = cost + 78; v7 = 1; loc = 7;
          ::  (v8==0) -> cost = cost + 83; v8 = 1; loc = 8;
          ::  (v9==0) -> cost = cost + 49; v9 = 1; loc = 9;
          ::  (v10==0) -> cost = cost + 37; v10 = 1; loc = 10;
          fi;
  ::  (loc == 6) && 
      (v0*v1*v2*v3*v4*v5*v6*v7*v8*v9*v10*1 == 0) ->
          if
          ::  (v1==0) -> cost = cost + 3; v1 = 1; loc = 1;
          ::  (v2==0) -> cost = cost + 82; v2 = 1; loc = 2;
          ::  (v3==0) -> cost = cost + 36; v3 = 1; loc = 3;
          ::  (v4==0) -> cost = cost + 81; v4 = 1; loc = 4;
          ::  (v5==0) -> cost = cost + 28; v5 = 1; loc = 5;
          ::  (v7==0) -> cost = cost + 86; v7 = 1; loc = 7;
          ::  (v8==0) -> cost = cost + 96; v8 = 1; loc = 8;
          ::  (v9==0) -> cost = cost + 78; v9 = 1; loc = 9;
          ::  (v10==0) -> cost = cost + 69; v10 = 1; loc = 10;
          fi;
  ::  (loc == 7) && 
      (v0*v1*v2*v3*v4*v5*v6*v7*v8*v9*v10*1 == 0) ->
          if
          ::  (v1==0) -> cost = cost + 97; v1 = 1; loc = 1;
          ::  (v2==0) -> cost = cost + 71; v2 = 1; loc = 2;
          ::  (v3==0) -> cost = cost + 8; v3 = 1; loc = 3;
          ::  (v4==0) -> cost = cost + 54; v4 = 1; loc = 4;
          ::  (v5==0) -> cost = cost + 96; v5 = 1; loc = 5;
          ::  (v6==0) -> cost = cost + 42; v6 = 1; loc = 6;
          ::  (v8==0) -> cost = cost + 42; v8 = 1; loc = 8;
          ::  (v9==0) -> cost = cost + 39; v9 = 1; loc = 9;
          ::  (v10==0) -> cost = cost + 84; v10 = 1; loc = 10;
          fi;
  ::  (loc == 8) && 
      (v0*v1*v2*v3*v4*v5*v6*v7*v8*v9*v10*1 == 0) ->
          if
          ::  (v1==0) -> cost = cost + 73; v1 = 1; loc = 1;
          ::  (v2==0) -> cost = cost + 44; v2 = 1; loc = 2;
          ::  (v3==0) -> cost = cost + 12; v3 = 1; loc = 3;
          ::  (v4==0) -> cost = cost + 23; v4 = 1; loc = 4;
          ::  (v5==0) -> cost = cost + 31; v5 = 1; loc = 5;
          ::  (v6==0) -> cost = cost + 25; v6 = 1; loc = 6;
          ::  (v7==0) -> cost = cost + 38; v7 = 1; loc = 7;
          ::  (v9==0) -> cost = cost + 81; v9 = 1; loc = 9;
          ::  (v10==0) -> cost = cost + 32; v10 = 1; loc = 10;
          fi;
  ::  (loc == 9) && 
      (v0*v1*v2*v3*v4*v5*v6*v7*v8*v9*v10*1 == 0) ->
          if
          ::  (v1==0) -> cost = cost + 29; v1 = 1; loc = 1;
          ::  (v2==0) -> cost = cost + 100; v2 = 1; loc = 2;
          ::  (v3==0) -> cost = cost + 64; v3 = 1; loc = 3;
          ::  (v4==0) -> cost = cost + 61; v4 = 1; loc = 4;
          ::  (v5==0) -> cost = cost + 51; v5 = 1; loc = 5;
          ::  (v6==0) -> cost = cost + 84; v6 = 1; loc = 6;
          ::  (v7==0) -> cost = cost + 20; v7 = 1; loc = 7;
          ::  (v8==0) -> cost = cost + 4; v8 = 1; loc = 8;
          ::  (v10==0) -> cost = cost + 74; v10 = 1; loc = 10;
          fi;
  ::  (loc == 10) && 
      (v0*v1*v2*v3*v4*v5*v6*v7*v8*v9*v10*1 == 0) ->
          if
          ::  (v1==0) -> cost = cost + 30; v1 = 1; loc = 1;
          ::  (v2==0) -> cost = cost + 78; v2 = 1; loc = 2;
          ::  (v3==0) -> cost = cost + 22; v3 = 1; loc = 3;
          ::  (v4==0) -> cost = cost + 31; v4 = 1; loc = 4;
          ::  (v5==0) -> cost = cost + 7; v5 = 1; loc = 5;
          ::  (v6==0) -> cost = cost + 56; v6 = 1; loc = 6;
          ::  (v7==0) -> cost = cost + 42; v7 = 1; loc = 7;
          ::  (v8==0) -> cost = cost + 12; v8 = 1; loc = 8;
          ::  (v9==0) -> cost = cost + 69; v9 = 1; loc = 9;
          fi;
  od;
  assert(cost >= MINCOST);  /* should hold */
}

