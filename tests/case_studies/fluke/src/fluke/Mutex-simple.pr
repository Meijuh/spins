/*
 * Copyright (c) 1996 The University of Utah and
 * the Computer Systems Laboratory at the University of Utah (CSL).
 * All rights reserved.
 *
 * Permission to use, copy, modify and distribute this software is hereby
 * granted provided that (1) source code retains these copyright, permission,
 * and disclaimer notices, and (2) redistributions including binaries
 * reproduce the notices in supporting documentation, and (3) all advertising
 * materials mentioning features or use of this software display the following
 * acknowledgement: ``This product includes software developed by the
 * Computer Systems Laboratory at the University of Utah.''
 *
 * THE UNIVERSITY OF UTAH AND CSL ALLOW FREE USE OF THIS SOFTWARE IN ITS "AS
 * IS" CONDITION.  THE UNIVERSITY OF UTAH AND CSL DISCLAIM ANY LIABILITY OF
 * ANY KIND FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * CSL requests users of this software to return to csl-dist@cs.utah.edu any
 * improvements that they make and grant CSL redistribution rights.
 */
/*
 * Mutex-simple.pr - Promela implementation of minimum-state Fluke
 *                   kernel mutexes.  Nothing fancy, nothing real
 *                   safe.  Just mutual exclusion.
 *
 * State:  1 bit
 * Safety: Minimal (no additional states for assertions)
 */

#ifndef _FLUKE_KERNEL_MUTEX_
#define _FLUKE_KERNEL_MUTEX_

/*
 * This module covers the Mutex interface as follows:
 *
 *    I==Implemented    N==Null Implementation    U==Unimplemented (assert 0)
 * 
 * Instance Manipulation:
 *  I  Mutex(m)                     Instantiate a mutex, m
 *  I  mutexInit(m)                 Initialize a new mutex, m.  Call pre-using.
 *  N  mutexDestroy(m)              Destroy an existing mutex, m.
 *
 * Mutual Exclusion:
 *  I  mutexLock(m,owner)           Atomically block 'till unlocked/lock m.
 *  I  mutexUnlock(m,owner)         Unlock m.  m should be locked.
 *  U  mutexLockCancelable(m,owner) Like lock, but blocking can be cancelled.
 *  U  mutexTryLock(m,owner)        Atomic test-and-lock.
 *  I  mutexWait(m)                 Block until m is unlocked.
 *
 * State Extraction:
 *  I  mutexIsLocked(m)             true iff m is locked
 *  I  mutexIsUnlocked(m)           true iff m is not locked
 *
 * Assertions:
 *  N  mutexAssertLive(m)           Violated if m (not init'd) or (destroyed)
 *  N  mutexAssertDead(m)           Violated if m (not destroyed) or (init'd)
 *  I  mutexAssertLocked(m)         Violated if m not currently locked
 *  I  mutexAssertUnlocked(m)       Violated if m currently locked
 *  N  mutexAssertOwnerIs(m,owner)  Violated if m locked and 'owner' not owner
 */

/*-- Mutex type and legal state values ------------------------------------*/

typedef Mutex {
  bit isLocked;
}

#define __MUTEX_UNLOCKED 0  /* Mutex is extant and not locked by anyone */
#define __MUTEX_LOCKED   1  /* Mutex is extant and is currently locked  */

/*-- Mutex operations -----------------------------------------------------*/

/* This should be called before using.  This mutex implementation does not */
/* guarantee that it WILL BE called before the mutex is used, however.     */

#define mutexInit(m) 							\
	m.isLocked = __MUTEX_UNLOCKED

#define mutexDestroy(m) assert(1)

/* Block until mutex is unlocked, then atomically lock it.                 */

#define mutexLock(m,owner)						\
	atomic {							\
		mutexLockCallerAtomic(m,owner);				\
	}

#define mutexLockCallerAtomic(m,owner)			\
		m.isLocked == __MUTEX_UNLOCKED ->	\
			m.isLocked = __MUTEX_LOCKED	\
	

/* If this is ever called, you should use a non-simple mutex, since this   */
/* simple mutex implementation does not check for lock-after-destroy.      */

#define mutexUnlock(m,owner)						\
	atomic {							\
	  mutexUnlockCallerAtomic(m,owner);				\
	}

#define mutexUnlockCallerAtomic(m,owner)				\
		assert(m.isLocked == __MUTEX_LOCKED);			\
		m.isLocked = __MUTEX_UNLOCKED				\

/* If you want to assert something about mutex state, do it this way:      */

#define mutexAssertLive(m)          assert(1)
#define mutexAssertDead(m)	    assert(1)
#define mutexAssertLocked(m)        assert(m.isLocked == __MUTEX_LOCKED)
#define mutexAssertUnlocked(m)      assert(m.isLocked == __MUTEX_UNLOCKED)
#define mutexAssertOwnerIs(m,owner) assert(1)

/* Accessor functions to check the state of a mutex. */

#define mutexIsLocked(m) (m.isLocked == __MUTEX_LOCKED)
#define mutexIsUnlocked(m) (m.isLocked == __MUTEX_UNLOCKED)

/* These things are not supported by simple mutexes.                       */

#define mutexLockCancelable(m,owner)  assert(0)
#define mutexTryLock(m,owner)         assert(0)

#endif /* _FLUKE_KERNEL_MUTEX_ */
