/*
 * Copyright (c) 1996 The University of Utah and
 * the Computer Systems Laboratory at the University of Utah (CSL).
 * All rights reserved.
 *
 * Permission to use, copy, modify and distribute this software is hereby
 * granted provided that (1) source code retains these copyright, permission,
 * and disclaimer notices, and (2) redistributions including binaries
 * reproduce the notices in supporting documentation, and (3) all advertising
 * materials mentioning features or use of this software display the following
 * acknowledgement: ``This product includes software developed by the
 * Computer Systems Laboratory at the University of Utah.''
 *
 * THE UNIVERSITY OF UTAH AND CSL ALLOW FREE USE OF THIS SOFTWARE IN ITS "AS
 * IS" CONDITION.  THE UNIVERSITY OF UTAH AND CSL DISCLAIM ANY LIABILITY OF
 * ANY KIND FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * CSL requests users of this software to return to csl-dist@cs.utah.edu any
 * improvements that they make and grant CSL redistribution rights.
 */
/*
 * Promela equivalent of the Fluke kernel condition vairables.
 *
 * Three atomic operations are supported:
 * - wait on a condition variable, atomically unlocking the 
 *   associated mutex.
 * - place another (captured) thread asleep on a condition variable
 * - wakeup a thread on a condition variable but hold it hostage
 * - signal a condition variable (wakeup and thread_ready())
 * - wake up all threads that are waiting on a condition variable
 * 
 *
 * This is the interface to the control procs.
 * Wait Queue operations which send messages to the state procs are
 * called and state procs do the actual work.
 * 
 */
#ifndef _FLUKE_KERNEL_COND_VARIABLE_
#define _FLUKE_KERNEL_COND_VARIABLE_

#include "../fluke/WaitQueue.pr"
#include "../fluke/Thread.pr"
#include "../fluke/ResultCode.pr"
#include "interrupts.pr"
#include "dispatch.pr"

/*
 * Functions defined in this file:
 *
 * condWait(cond, mutex) -> Rc
 * condWaitOther(cond, thread)
 * idCondWakeup(cond) -> Thread      
 * condWakeup(cond) -> Thread
 * condSignal(cond)
 * condBrodcast(cond)


/* A condition variable is just a wait queue */
#define CondVar		\
    WaitQueue

/* Does nothing as the wait queues are global */
#define condInit(c)

/* wait_queue_destroy not needed as the wait queues are global */
#define condDestroy(c)  condBroadcast(c)

/*
 * Wait on the specified condition variable wQid,
 * atomically unlocking the associated mutex m
 * Does _not_ re-lock the mutex before returning (unlike POSIX conds).
 *
 * Returns wait_state.resume_rc when woken up.
 */
#define condWait(wQid, m)						\
    disableInterrupts();						\
    mutexAssertLocked(m);						\
    mutexAssertOwnerIs(m, currentThread);				\
    mutexLock(waitStateMutexes[currentThread], currentThread);		\
    assert(threadWaitVal(currentThread) == WAIT_NONE);			\
									\
    /*									\
     * If a cancel was already pending,					\
     * return an error immediately without switching threads.		\
     */									\
    if									\
    :: (threadWaitCancelPending(currentThread) == 1) ->			\
        /* NEW */mutexUnlock(m,currentThread);				\
        mutexUnlock(waitStateMutexes[currentThread], currentThread);	\
        enableInterrupts();						\
        rc = KR_CANCEL;       /* return KR_CANCEL */			\
    :: else ->								\
        assert(threadWaitCancelPending(currentThread) == 0);		\
        /*								\
	 * By default, when we wake up,					\
	 * just restart from user space.				\
	 */								\
        threadSetWaitResumeRc(currentThread, KR_RESTART);		\
	threadSetWaitVal(currentThread, WAIT_ON_COND);			\
	threadSetWaitWaitingOn(currentThread, wQid);			\
									\
	atomic {							\
          mutexUnlockCallerAtomic(m, currentThread);			\
          wqAddSelfCallerAtomic(wQid, currentThread);			\
	  /* The waitState mutex s unlocked in id_thread_dispatch */	\
	  idThreadDispatchCallerAtomic(currentThread,			\
		       waitStateMutexes[currentThread]);		\
	}								\
									\
        enableInterrupts();						\
									\
	/*								\
	 * We've been asleep for (potentially) a long time,		\
	 * return correct resume_rc					\
	 */								\
	/* RETURN */ rc = threadWaitResumeRc(currentThread);		\
    fi



/* 
 * Place another (captured) thread asleep on a condition variable
 * This function returns void.
 */
#define condWaitOther(wQid, thread)				\
    disableInterrupts();					\
    mutexLock(waitStateMutexes[thread], currentThread);		\
    assert(threadWaitVal(thread) == WAIT_NONE);			\
    if								\
    :: (threadWaitCancelPending(thread) == 1) ->		\
        threadSetWaitResumeRc(thread, KR_CANCEL);		\
        threadReady(thread);					\
    :: else ->							\
        assert(threadWaitCancelPending(thread) == 0);		\
	threadSetWaitResumeRc(thread, KR_RESTART);		\
	threadSetWaitVal(thread, WAIT_ON_COND);			\
	threadSetWaitWaitingOn(thread, wQid);			\
        wqAddOther(wQid, thread);				\
    fi;								\
    mutexUnlock(waitStateMutexes[thread], currentThread);	\
    enableInterrupts()

/*
 * Wakeup a thread on a condition variable but hold it hostage.
 * The caller must call thread_ready() on it later to release it.
 * Returns THREAD_ID_INVALID if no threads are waiting on the condition.
 * Otherwise, returns id of thread awoken.
 * The "return value" is in "rc".
 */
#define idCondWakeup(wQid)					\
    wqRemove(wQid);						\
    /* the thread removed from the wait queue is now in rc */	\
    if								\
    :: (rc != THREAD_ID_INVALID) ->				\
        mutexLock(waitStateMutexes[rc], currentThread);		\
	assert(threadWaitVal(rc) == WAIT_ON_COND);		\
	assert(threadWaitWaitingOn(rc) == wQid);		\
	threadSetWaitVal(rc, WAIT_NONE);			\
	threadSetWaitWaitingOn(rc, THREAD_ID_INVALID);		\
        mutexUnlock(waitStateMutexes[rc], currentThread);	\
    :: else ->							\
        rc = THREAD_ID_INVALID;					\
    fi

/*
 * Wakeup a thread on a condition variable but hold it hostage.
 * The caller must call thread_ready() on it later to release it.
 * Returns NULL if no threads are waiting on the condition.
 * The "return value" is in "rc"
 */
#define condWakeup(wQid)			\
    disableInterrupts();			\
    idCondWakeup(wQid);				\
    /* RETURN  rc = idCondWakeup() */   	\
    enableInterrupts()

/*
 * Signal a condition variable,
 * waking up at least one thread if any threads are waiting on it.
 * The woken thread is also readied.
 *
 * This is a void function that uses 'rc' internally, so it
 * sets rc to KR_INVALID.
 */
#define condSignal(wQid)					\
    disableInterrupts();					\
    idCondWakeup(wQid);						\
    /* The thread woken up is now in rc */			\
    if								\
    :: (rc != THREAD_ID_INVALID) ->				\
        threadReady(rc);					\
    :: else ->							\
        skip;							\
    fi;								\
    enableInterrupts();						\
    rc = KR_INVALID						\

/*
 * Wake up all threads that are waiting on a condition variable.
 *
 * Munges rc, internally, sets it to KR_INVALID on exit, as this
 * is supposed to be a function returning void.
 */
#define condBroadcast(wQid)					\
    disableInterrupts();					\
    idCondWakeup(wQid);						\
    /* The thread woken up is now in rc */			\
    do								\
    :: (rc != THREAD_ID_INVALID) ->				\
        threadReady(rc);					\
        idCondWakeup(wQid);					\
    :: else ->							\
        break;							\
    od;								\
    enableInterrupts();						\
    rc = KR_INVALID

#endif /* _FLUKE_KERNEL_COND_VARIABLE_ */
