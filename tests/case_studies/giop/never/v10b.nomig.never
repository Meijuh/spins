#define r0 (gTag == prid[6] && (Server[prid[8]]@UserProcessed))
#define r1 (gTag == prid[7] && (Server[prid[8]]@UserProcessed))
#define i0 (User[prid[6]]@URequestSent)
#define i1 (User[prid[7]]@URequestSent)

	/*
	 * Formula As Typed: []  (( i0 && i1 && <> r0) ->  ( ! r1 U r0))
	 * The Never Claim Below Corresponds
	 * To The Negated Formula !([]  (( i0 && i1 && <> r0) ->  ( ! r1 U r0)))
	 * (formalizing violations of the original)
	 */

never {    /* !([]  (( i0 && i1 && <> r0) ->  ( ! r1 U r0))) */
T0_init:
	if
	:: (! ((r0)) && (i0) && (i1) && (r0)) -> goto accept_S11
	:: (! ((r0)) && (i0) && (i1) && (r0) && (r1)) -> goto accept_all
	:: (! ((r0)) && (i0) && (i1)) -> goto T0_S14
	:: (! ((r0)) && (i0) && (i1) && (r1)) -> goto T0_S2
	:: (1) -> goto T0_init
	fi;
accept_S11:
	if
	:: (! ((r0))) -> goto T0_S11
	:: (! ((r0)) && (r1)) -> goto accept_all
	fi;
T0_S11:
	if
	:: (! ((r0))) -> goto accept_S11
	:: (! ((r0)) && (r1)) -> goto accept_all
	fi;
T0_S14:
	if
	:: (! ((r0)) && (r0)) -> goto accept_S11
	:: (! ((r0)) && (r0) && (r1)) -> goto accept_all
	:: (! ((r0))) -> goto T0_S14
	:: (! ((r0)) && (r1)) -> goto T0_S2
	fi;
T0_S2:
	if
	:: ((r0)) -> goto accept_all
	:: (1) -> goto T0_S2
	fi;
accept_all:
	skip
}

#ifdef NOTES


#endif
#ifdef RESULT
#endif
